#!/usr/bin/env python3
#
# Import script of CAPEC references.
#
# Imported in cvedb in the collection named capec.
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2016-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import logging
import os
import shutil
import sys
from multiprocessing import Queue

from pymongo import UpdateOne

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.XMLFileHandler import XMLFileHandler
from xml.sax import make_parser
from xml.sax.handler import ContentHandler

from lib.Config import Configuration


class CapecHandler(ContentHandler):
    def __init__(self):
        self.capec = []
        self.Attack_Pattern_Catalog_tag = False
        self.Attack_Patterns_tag = False
        self.Attack_Pattern_tag = False
        self.Attack_step_tag = False
        self.Description_tag = False
        self.Text_tag = False
        self.Prerequisites_tag = False
        self.Prerequisite_tag = False
        self.Mitigations_tag = False
        self.Mitigation_tag = False
        self.Related_Weaknesses_tag = False
        self.Related_Weakness_tag = False
        self.CWE_ID_tag = False

        self.tag = False

        self.id = ""
        self.name = ""

        self.Summary_ch = ""
        self.Prerequisite_ch = ""
        self.Mitigation_ch = ""
        self.CWE_ID_ch = ""

        self.Summary = []
        self.Prerequisite = []
        self.Solution_or_Mitigation = []
        self.Related_Weakness = []

    def startElement(self, name, attrs):

        if name == "Attack_Pattern_Catalog":
            self.Attack_Pattern_Catalog_tag = True
        if name == "Attack_Patterns" and self.Attack_Pattern_Catalog_tag:
            self.Attack_Patterns_tag = True
        if name == "Attack_Pattern" and self.Attack_Patterns_tag:
            self.Attack_Pattern_tag = True

        if self.Attack_Pattern_tag:
            self.tag = name
            if self.tag == "Attack_Pattern":
                self.id = attrs.getValue("ID")
                self.name = attrs.getValue("Name")

            if self.tag == "Attack_Step":
                self.Attack_step_tag = True

            if self.tag == "Description" and not self.Attack_step_tag:
                self.Description_tag = True
                self.Summary_ch = ""

            if self.tag == "Prerequisites":
                self.Prerequisites_tag = True
            if name == "Prerequisite" and self.Prerequisites_tag:
                self.Prerequisite_tag = True
                self.Prerequisite_ch = ""

            if self.tag == "Mitigations":
                self.Mitigations_tag = True
            if name == "Mitigation" and self.Mitigations_tag:
                self.Mitigation_tag = True
            if name == "xhtml:p" and self.Mitigation_tag:
                self.Text_tag = True
                self.Mitigation_ch = ""

            if self.tag == "Related_Weaknesses":
                self.Related_Weaknesses_tag = True
            if name == "Related_Weakness" and self.Related_Weaknesses_tag:
                self.Related_Weakness.append(attrs.getValue("CWE_ID"))

    def characters(self, ch):
        if self.Description_tag:
            self.Summary_ch += ch

        if self.Prerequisite_tag:
            self.Prerequisite_ch += ch

        if self.Text_tag:
            if self.Mitigation_tag:
                self.Mitigation_ch += ch

    def endElement(self, name):
        if name == "Description" and not self.Attack_step_tag:
            self.Summary.append(self.Summary_ch.rstrip())
            if self.Summary_ch != "":
                self.Summary_ch = ""
            self.Description_tag = False

        if name == "Attack_Step":
            self.Attack_step_tag = False

        if name == "Prerequisite":
            if self.Prerequisite_ch != "":
                self.Prerequisite.append(self.Prerequisite_ch.rstrip())
            self.Prerequisite_tag = False
        if name == "Mitigation":
            if self.Mitigation_ch != "":
                self.Solution_or_Mitigation.append(self.Mitigation_ch.rstrip())
                self.Mitigation_ch = ""
            self.Mitigation_tag = False

        if name == "Prerequisites":
            self.Prerequisites_tag = False
        if name == "Mitigations":
            self.Mitigations_tag = False
        if name == "Related_Weaknesses":
            self.Related_Weaknesses_tag = False

        if name == "Attack_Pattern":
            self.capec.append(
                {
                    "name": self.name,
                    "id": self.id,
                    "summary": "\n".join(self.Summary),
                    "prerequisites": " ".join(self.Prerequisite),
                    "solutions": " ".join(self.Solution_or_Mitigation),
                    "related_weakness": sorted(self.Related_Weakness),
                }
            )
            self.Summary = []
            self.Prerequisite = []
            self.Solution_or_Mitigation = []
            self.Related_Weakness = []

            self.Attack_Pattern_tag = False
        if name == "Attack_Patterns":
            self.Attack_Patterns_tag = False
        if name == "Attack_Pattern_Catalog":
            self.Attack_Pattern_Catalog_tag = False


class CAPECDownloads(XMLFileHandler):
    def __init__(self):
        self.feed_type = "CAPEC"
        super().__init__(self.feed_type)

        self.feed_url = Configuration.getFeedURL(self.feed_type.lower())

        self.logger = logging.getLogger("CAPECDownloads")

        self.queue = Queue()

        # make parser
        self.parser = make_parser()
        self.ch = CapecHandler()
        self.parser.setContentHandler(self.ch)

    def file_to_queue(self, working_dir, filename):

        self.parser.parse(filename)
        x = 0
        for attack in self.ch.capec:
            self.queue.put(
                UpdateOne({"id": attack["id"]}, {"$set": attack}, upsert=True,)
            )
            x += 1

        self.logger.debug("Processed {} entries from file: {}".format(x, filename))

        try:
            self.logger.debug("Removing working dir: {}".format(working_dir))
            shutil.rmtree(working_dir)
        except Exception as err:
            self.logger.error(
                "Failed to remove working dir; error produced: {}".format(err)
            )

    def update(self, **kwargs):
        self.logger.info("CAPEC database update started")

        self.process_downloads(
            [self.feed_url], self.queue, collection=self.feed_type.lower(),
        )

        self.logger.info("Finished CAPEC database update")

        return self.last_modified

    def populate(self, **kwargs):
        pass


if __name__ == "__main__":
    cad = CAPECDownloads()

    lastmodified = cad.update()
