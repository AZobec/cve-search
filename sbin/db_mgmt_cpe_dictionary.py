#!/usr/bin/env python3
#
# Import script of nvd cpe (Common Platform Enumeration) definition
# into a collection used for human readable lookup of product name.
#
# Imported in cvedb in the collection named cpe.
#
# The format of the collection is the following
#
# { "_id" : ObjectId("50a2739eae24ac2274eae7c0"), "id" :
# "cpe:/a:1024cms:1024_cms:0.7", "title" : "1024cms.org 1024 CMS 0.7" }
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2012 		Wim Remes
# Copyright (c) 2012-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2014-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import argparse
import hashlib
import logging
import os
import sys
from multiprocessing import Queue

from pymongo import UpdateOne, InsertOne

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.JSONFileHandler import JSONFileHandler
from lib.Config import Configuration
import lib.DatabaseLayer as db
from lib.Toolkit import generate_title

# parse command line arguments
argparser = argparse.ArgumentParser(
    description="populate/update the local CPE database"
)
argparser.add_argument("-u", action="store_true", help="update the database")
argparser.add_argument("-p", action="store_true", help="populate the database")
argparser.add_argument(
    "-a", action="store_true", default=False, help="force populating the CPE database"
)
argparser.add_argument(
    "-f", action="store_true", default=False, help="force update of the CPE database"
)
argparser.add_argument("-v", action="store_true", help="verbose output")
args = argparser.parse_args()


def process_cpe_item(item=None):
    if item is None:
        return None
    if "cpe23Uri" not in item:
        return None

    cpe = {
        "title": generate_title(item["cpe23Uri"]),
        "cpe_2_2": item["cpe23Uri"],
        "cpe_name": item["cpe_name"],
    }
    version_info = ""
    if "versionStartExcluding" in item:
        cpe["versionStartExcluding"] = item["versionStartExcluding"]
        version_info += cpe["versionStartExcluding"]
    if "versionStartIncluding" in item:
        cpe["versionStartIncluding"] = item["versionStartIncluding"]
        version_info += cpe["versionStartIncluding"]
    if "versionEndExcluding" in item:
        cpe["versionEndExcluding"] = item["versionEndExcluding"]
        version_info += cpe["versionEndExcluding"]
    if "versionEndIncluding" in item:
        cpe["versionEndIncluding"] = item["versionEndIncluding"]
        version_info += cpe["versionEndIncluding"]

    sha1_hash = hashlib.sha1(
        cpe["cpe_2_2"].encode("utf-8") + version_info.encode("utf-8")
    ).hexdigest()
    cpe["id"] = sha1_hash

    return cpe


class CPEDownloads(JSONFileHandler):
    def __init__(self):
        self.feed_type = "CPE"
        self.prefix = "matches.item"
        super().__init__(self.feed_type, self.prefix)

        self.feed_url = Configuration.getFeedURL(self.feed_type.lower())

        self.queue = Queue()

        self.is_update = True

        self.logger = logging.getLogger("CPEDownloads")

    def process_item(self, item):
        cpe = process_cpe_item(item)
        if self.is_update:
            self.queue.put(UpdateOne({"id": cpe["id"]}, {"$set": cpe}, upsert=True,))
        else:
            self.queue.put(InsertOne(cpe))

    def update(self, **kwargs):
        self.logger.info("CPE database update started")

        self.process_downloads(
            [self.feed_url], self.queue, collection=self.feed_type.lower(),
        )

        db.setColUpdate(self.feed_type.lower(), self.last_modified)

        self.logger.info("Finished CPE database update")

        return self.last_modified

    def populate(self, **kwargs):
        self.logger.info("CPE Database population started")
        db.dropCollection(self.feed_type.lower())

        self.is_update = False

        self.process_downloads(
            [self.feed_url], self.queue, collection=self.feed_type.lower(),
        )

        db.setColUpdate(self.feed_type.lower(), self.last_modified)

        self.logger.info("Finished CPE database population")

        return self.last_modified


if __name__ == "__main__":
    cpd = CPEDownloads()
    cpd.logger.debug("{}".format(" ".join(sys.argv)))

    if args.u:

        last_modified = cpd.update()

    elif args.p:
        c = db.getSize(cpd.feed_type.lower())
        if args.v:
            cpd.logger.info(str(c))
        if c > 0 and args.a is False:
            cpd.logger.info("Database already populated")
        else:
            last_modified = cpd.populate()
