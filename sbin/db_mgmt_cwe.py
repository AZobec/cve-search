#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Import script of NIST CWE Common Weakness Enumeration.
#
# Until now, the import is only import Weakness description.
#
# The format is the following:
#
# { "_id" : ObjectId("52b70521b261026f36818515"), "weaknessabs" : "Variant",
# "name" : "ASP.NET Misconfiguration: Missing Custom Error Page",
# "description_summary" : "An ASP .NET application must enable custom error
# pages in order to prevent attackers from mining information from the
# framework's built-in responses.An ASP .NET application must enable custom
# error pages in order to prevent attackers from mining information from the
# framework's built-in responses.", "status" : "Draft", "id" : "12" }
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2013-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from dateutil.parser import parse as parse_datetime

from xml.sax import make_parser
from xml.sax.handler import ContentHandler
import argparse
import zipfile
import tempfile

from lib.ProgressBar import progressbar
from lib.Config import Configuration
import lib.DatabaseLayer as db

argparser = argparse.ArgumentParser(description='populate/update NIST CWE Common Weakness Enumeration database')
argparser.add_argument('-v', action='store_true', help='verbose output')
args = argparser.parse_args()


class CWEHandler(ContentHandler):
    def __init__(self):
        self.cwe = []
        self.category = []
        self.description_summary_tag = False
        self.weakness_tag = False
        self.related_weakness_tag = False


    def startElement(self, name, attrs):

        if name == 'Weakness':
            self.weakness_tag = True
            self.statement = ""
            self.weaknessabs = attrs.get('Weakness_Abstraction')
            self.name = attrs.get('Name')
            self.idname = attrs.get('ID')
            self.status = attrs.get('Status')
            self.cwe.append({'name': self.name, 'id': self.idname, 'status': self.status,
                             'weaknessabs': self.weaknessabs})
        elif name == 'Description_Summary' and self.weakness_tag:
            self.description_summary_tag = True
            self.description_summary = ""
        elif name == 'Related_Weaknesses' and self.weakness_tag:
            self.related_weaknesses_sub_tag = True
            self.related_weaknesses = []
        elif name == 'Related_Weakness' and self.related_weaknesses_sub_tag:
            self.related_weakness_tag = True
            self.nature = attrs.get('Nature')
            self.id = attrs.get('CWE_ID')
            self.view = attrs.get('View_ID')
            self.related = {'related_id': self.id, 'related_nature': self.nature, 'related_view': self.view}

    def characters(self, ch):
        if self.description_summary_tag:
            self.description_summary += ch.replace("       ", "")

    def endElement(self, name):
        if name == 'Description_Summary' and self.weakness_tag:
            self.description_summary_tag = False
            self.description_summary = self.description_summary + self.description_summary
            self.cwe[-1]['description_summary'] = self.description_summary.replace("\n", "")
        elif name == 'Weakness' and self.weakness_tag:
            self.weakness_tag = False
        elif name == 'Related_Weaknesses' and self.related_weaknesses_sub_tag:
            self.related_weaknesses_sub_tag = False
            self.cwe[-1]['related_weaknesse'] = self.related_weaknesses
        elif name == 'Related_Weakness' and self.related_weakness_tag:
            self.related_weakness_tag = False
            self.related_weaknesses.append(self.related)


# make parser
parser = make_parser()
ch = CWEHandler()
parser.setContentHandler(ch)
# check modification date
try:
    (f, r) = Configuration.getFeedData('cwe')
except Exception as e:
    print(e)
    sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (Configuration.getFeedURL("cwe")))
lastmodified = parse_datetime(r.headers['last-modified'], ignoretz=True)
i = db.getLastModified('cwe')
# if i is not None:
#     if lastmodified == i:
#         print("Not modified")
#         sys.exit(0)
#

# parse xml and store in database
parser.parse(f)
cweList = []
for cwe in progressbar(ch.cwe):
    cwe['description_summary'] = cwe['description_summary'].replace("\t\t\t\t\t", " ")
    if args.v:
        print (cwe)
    cweList.append(cwe)
# db.bulkUpdate('cwe', cweList)
#
# #update database info after successful program-run
# db.setColUpdate('cwe', lastmodified)
