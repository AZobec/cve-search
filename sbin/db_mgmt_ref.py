#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Import NIST CVE Reference Key/Maps into Redis
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015 	Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2016  Pieter-Jan Moreels

import argparse
import csv
import os
import re
import shutil
import sys
import zipfile

from collections     import defaultdict
from io              import BytesIO, StringIO
from lxml.html       import fromstring
from xml.sax         import make_parser
from xml.sax.handler import ContentHandler

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.Config import Configuration
import lib.DatabaseLayer as db

# Data format in Redis

# SET
# CVEID -> SET of REF
# REF is VENDOR:THEIRID
# K/V
# l:VENDOR -> URL

try:
    redis = Configuration.getRedisRefConnection()
except:
    sys.exit(1)

try:
    redis.info()
except:
    sys.exit("Redis server not running on %s:%s"%(Configuration.getRedisHost(),Configuration.getRedisPort()))

argparser = argparse.ArgumentParser(description='Populate/update the NIST ref database')
argparser.add_argument('-v', action='store_true', help='verbose output', default=False)
args = argparser.parse_args()

Modified = False

def getFile(source, unpack=True):
    global Modified
    try:
        (f, r) = Configuration.getFeedData(source, unpack)
        if (r.headers['last-modified'] == None or
            r.headers['last-modified'] != db.getLastModified(source)):
            Modified = True
            return (f, r)
        else: return (None, None)
    except:
        print("Cannot open url %s. Bad URL or not connected to the internet?"%(Configuration.getFeedURL(source)))


##############
# Redhat RPM #
##############
class RPMHandler(ContentHandler):
    def __init__(self):
        self.location = 'redhat'
        self.CVEs = defaultdict(dict)
        self.rpm = None
        self.cveTag = False

    def startElement(self, name, attrs):
        if   name == 'rpm':               self.rpm = attrs.get('rpm')
        elif name == 'cve' and self.rpm:  self.cveTag = True

    def characters(self, ch):
        if self.cveTag:
            if not ('rpms' in self.CVEs[ch.upper()] and
               type(self.CVEs[ch.upper()]['rpms']) is list):
                self.CVEs[ch.upper()]['rpms'] = []
            self.CVEs[ch.upper()]['rpms'].append(self.rpm)

    def endElement(self, name):
        if   name == 'rpm': self.rpm = None
        elif name == 'cve': self.cveTag = False


##############################
# Redhat Security Advisories #
##############################
class RHSAHandler(ContentHandler):
    def __init__(self):
        self.location = 'redhat'
        self.CVEs = defaultdict(dict)
        self.rhsa = None
        self.elem = None
        self.ovalstack = None

    def getLastLevel(self, dictionary, key):
        level = dictionary
        while key in level.keys() and level.get("current", False):
            if type(level[key]) is dict:
                level = level[key]
            if type(level[key]) is list:
              for x in level[key]:
                  if type(x) is dict and x.get("current", False):
                      level = level[key]
        return level
        

    def startElement(self, name, attrs):
        self.elem = name
        if   name == 'definition':  self.rhsa = {'bugzilla': {}, 'rhsa': {}, 'oval': {}}
        elif name == 'issued':      self.rhsa['rhsa']['released'] = attrs.get("date")
        elif name == 'bugzilla':    self.rhsa['bugzilla']['id'] = attrs.get("id")
        elif name == 'reference' and attrs.get("source", "") == "RHSA":
            self.rhsa['rhsa']['id']="-".join(attrs.get("ref_id","").split("-")[:2])
        elif name == 'criteria':
            data = {"operator": attrs["operator"], "criteria": []}
            if not self.ovalstack: self.ovalstack = [data]
            else:
              self.ovalstack[-1]['criteria'].append(data)
              self.ovalstack.append(data)
        elif name == 'criterion':
            self.ovalstack[-1]['criteria'].append({"comment": attrs["comment"],
                                                   "oval": attrs["test_ref"]})

    def characters(self, ch):
        if   self.elem in ['title', 'severity']:
            self.rhsa['rhsa'][self.elem] = ch
        elif self.elem == 'bugzilla':  self.rhsa['bugzilla']['title']=ch
        elif self.elem == 'cve':       self.rhsa['cve'] = ch

    def endElement(self, name):
        self.elem = None
        if   name == 'definition':
            if 'cve' in self.rhsa:
                cve = self.rhsa.pop("cve")
                self.CVEs[cve] = self.rhsa
            self.rhsa = None
        elif name == 'criteria':
            if   len(self.ovalstack) == 0: return
            elif len(self.ovalstack) == 1:
                self.rhsa['oval'] = self.ovalstack.pop()
            else:
                self.ovalstack.pop()


handlers = [{'handler': RPMHandler(),  'source': 'rpm' },
            {'handler': RHSAHandler(), 'source': 'rhsa'} ]
parser = make_parser()

cves = defaultdict(dict)

for handler in handlers:
    _file, r = getFile(handler['source'])
    if _file:
        parser.setContentHandler(handler['handler'])
        parser.parse(_file)
        for cve, data in handler['handler'].CVEs.items():
            if handler['handler'].location not in cves[cve]:
                cves[cve][handler['handler'].location] = {}
            cves[cve][handler['handler'].location].update(data)
        db.setColUpdate(handler['source'], r.headers['last-modified'])


###########
# refmaps #
###########
_file, r = getFile('ref', unpack=False)
if _file:
    def addToList():
        if 'nist_ids' not in cves[cve]: cves[cve]['nist_ids'] = {}
        if vendor not in cves[cve]['nist_ids']:
            cves[cve]['nist_ids'][vendor] = []
        if vendorID not in cves[cve]['nist_ids'][vendor]:
            cves[cve]['nist_ids'][vendor].append(vendorID)

    zipobj = zipfile.ZipFile(BytesIO(_file.read()))
    bulk = defaultdict(dict)
    for filename in zipobj.namelist():
        with zipobj.open(filename) as infile:
            page = fromstring(infile.read().decode("utf-8"))
            vendor = page.xpath("//table[1]//tr[1]//td[2]")
            if vendor: vendor = vendor[0].text
            rows = page.xpath("//table[2]//tr//td")
            # CVE - Source ID
            IDs = [[rows[i].text, [x.text for x in rows[i+1].iterchildren()]] for i in range(0, len(rows), 2)]
            for e in IDs:
                vendorID = e[0] if not e[0].startswith(vendor.upper()+':') else e[0][len(vendor)+1:]
                for cve in e[1]:
                    #if args.v:
                    #    print (cve + "-->" + vendorID)
                    #redis.sadd(cve, vendorID)
                    if   vendor.upper() == "REDHAT":
                        if 'redhat' in cves[cve] and vendorID != cves[cve]['redhat'].get('rhsa', {}).get('id'):
                            if 'other_ids' not in cves[cve]['redhat']: cves[cve]['redhat']['other_ids'] = []
                            cves[cve]['redhat']['other_ids'].append(vendorID)
                        else: addToList()
                    elif vendor.upper() == "EXPLOIT-DB":
                        if 'exploit-db' not in cves[cve]: cves[cve]['exploit-db'] = []
                        cves[cve]['exploit-db'].append({'id':vendorID})
                    else:
                        addToList()

###########
# refmaps #
###########
_file, r = getFile('exploitdb')
exploits={}
if _file:
    exploitcsv = csv.DictReader(StringIO(_file.read().decode('utf-8')), delimiter=',')
    for row in exploitcsv:
        exploits[row['id']] = row
        #if args.v:
        #    print ("{} ({}) Imported".format(row['id'],row['description']))

# Map data
for cve, data in cves.items():
    # ExploitDB
    for exploit in data.get('exploit-db', []):
        exploit.update(exploits.get(exploit['id'], exploit))

#Save bulk

if Modified:
    cves = [dict({'id': x}, **y) for x, y in cves.items()]
    db.bulkRefUpdate(cves)
    # Update database info after successful program-run
    db.setColUpdate('ref', r.headers['last-modified'])
else:
  sys.exit('Not modified')
