#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Import of the VIA4 dataset (vFeed replacement)
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2015-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2016-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import json
import logging
import os
import shutil
import sys
from multiprocessing import Queue

import ijson
from pymongo import UpdateOne

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.DownloadHandler import JSONFileHandler

from lib.Config import Configuration
import lib.DatabaseLayer as db


# To Do: Implement REDIS
class VIADownloads(JSONFileHandler):
    def __init__(self):
        self.feed_type = "VIA4"
        super().__init__(self.feed_type)

        self.feed_url = Configuration.getFeedURL(self.feed_type.lower())

        self.queue = Queue()

        self.logger = logging.getLogger("VIADownloads")

    def file_to_queue(self, working_dir, filename):

        with open(filename, "rb") as input_file:
            x = 0
            for cve in ijson.items(input_file, "cves"):
                for key, val in cve.items():
                    entry_dict = {"id": key}
                    entry_dict.update(val)

                    self.queue.put(UpdateOne({"id": key}, {"$set": entry_dict}, upsert=True,))
                    x += 1

            self.logger.debug("Processed {} entries from file: {}".format(x, filename))

        with open(filename, "rb") as input_file:
            data = json.loads(input_file.read().decode("utf-8"))

            db.setColInfo("via4", "sources", data["metadata"]["sources"])
            db.setColInfo("via4", "searchables", data["metadata"]["searchables"])

            self.logger.debug("Processed metadata from file: {}".format(filename))

        try:
            self.logger.debug("Removing working dir: {}".format(working_dir))
            shutil.rmtree(working_dir)
        except Exception as err:
            self.logger.error(
                "Failed to remove working dir; error produced: {}".format(err)
            )

    def process_cves(self, cveitem):

        entry_dict = {}

        for key, val in cveitem.items():
            entry_dict.update(val, id=key)

        return UpdateOne({"id": entry_dict["id"]}, {"$set": entry_dict}, upsert=True,)

    def update(self, **kwargs):
        self.logger.info("VIA4 database update started")

        self.process_downloads(
            [self.feed_url], self.queue, collection=self.feed_type.lower(),
        )

        self.logger.info("Finished VIA4 database update")

        return self.last_modified

    def populate(self, **kwargs):
        raise NotImplementedError


if __name__ == "__main__":

    via = VIADownloads()

    try:
        redis = Configuration.getRedisRefConnection()
        try:
            redis.info()
        except:
            sys.exit(
                "Redis server not running on %s:%s"
                % (Configuration.getRedisHost(), Configuration.getRedisPort())
            )
    except Exception as e:
        print(e)
        sys.exit(1)

    lastmodified = via.update()
