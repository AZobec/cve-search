#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Manager for the database for the NVD JSON Files
#
# Current import is mapping all the old XML scheme from the NVD JSON files (WiP)
#
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2019 	Alexandre Dulaunoy - a@foo.be

# Imports
# make sure these modules are available on your system
import argparse
import datetime
import hashlib
import logging
import os
import sys
from multiprocessing import Queue

from dateutil.parser import parse as parse_datetime
from pymongo import UpdateOne, InsertOne

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.JSONFileHandler import JSONFileHandler
from lib.Config import Configuration
import lib.DatabaseLayer as db

# parse command line arguments
argparser = argparse.ArgumentParser(
    description="populate/update the local CVE database"
)
argparser.add_argument("-u", action="store_true", help="update the database")
argparser.add_argument("-p", action="store_true", help="populate the database")
argparser.add_argument(
    "-a", action="store_true", default=False, help="force populating the CVE database"
)
argparser.add_argument(
    "-f", action="store_true", default=False, help="force update of the CVE database"
)
argparser.add_argument("-v", action="store_true", help="verbose output")
args = argparser.parse_args()


# init parts of the file names to enable looped file download
file_prefix = "nvdcve-1.1-"
file_suffix = ".json.gz"
file_mod = "modified"
file_rec = "recent"

date = datetime.datetime.now()
year = date.year + 1

# default config
defaultvalue = {"cwe": "Unknown"}

cveStartYear = Configuration.getCVEStartYear()


def get_cpe_info(cpeuri):
    query = {}
    version_info = ""
    if "versionStartExcluding" in cpeuri:
        query["versionStartExcluding"] = cpeuri["versionStartExcluding"]
        version_info += query["versionStartExcluding"]
    if "versionStartIncluding" in cpeuri:
        query["versionStartIncluding"] = cpeuri["versionStartIncluding"]
        version_info += query["versionStartIncluding"]
    if "versionEndExcluding" in cpeuri:
        query["versionEndExcluding"] = cpeuri["versionEndExcluding"]
        version_info += query["versionEndExcluding"]
    if "versionEndIncluding" in cpeuri:
        query["versionEndIncluding"] = cpeuri["versionEndIncluding"]
        version_info += query["versionEndIncluding"]

    return query, version_info


def add_if_missing(cve, key, value):
    if value not in cve[key]:
        cve[key].append(value)
    return cve


def process_cve_item(item=None):
    if item is None:
        return None

    cve = {
        "id": item["cve"]["CVE_data_meta"]["ID"],
        "assigner": item["cve"]["CVE_data_meta"]["ASSIGNER"],
        "Published": parse_datetime(item["publishedDate"], ignoretz=True),
        "Modified": parse_datetime(item["lastModifiedDate"], ignoretz=True),
    }

    for description in item["cve"]["description"]["description_data"]:
        if description["lang"] == "en":
            if "summary" in cve:
                cve["summary"] += " {}".format(description["value"])
            else:
                cve["summary"] = description["value"]
    if "impact" in item:
        cve["access"] = {}
        cve["impact"] = {}
        if "baseMetricV2" in item["impact"]:
            cve["access"]["authentication"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "authentication"
            ]
            cve["access"]["complexity"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "accessComplexity"
            ]
            cve["access"]["vector"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "accessVector"
            ]
            cve["impact"]["availability"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "availabilityImpact"
            ]
            cve["impact"]["confidentiality"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "confidentialityImpact"
            ]
            cve["impact"]["integrity"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "integrityImpact"
            ]
            cve["cvss"] = float(item["impact"]["baseMetricV2"]["cvssV2"]["baseScore"])
            cve["cvss-time"] = parse_datetime(
                item["lastModifiedDate"], ignoretz=True
            )  # NVD JSON lacks the CVSS time which was present in the original XML format
            cve["cvss-vector"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "vectorString"
            ]
        else:
            cve["cvss"] = float(5)
    if "references" in item["cve"]:
        cve["references"] = []
        for ref in item["cve"]["references"]["reference_data"]:
            cve["references"].append(ref["url"])
    if "configurations" in item:
        cve["vulnerable_configuration"] = []
        cve["vulnerable_product"] = []
        for cpe in item["configurations"]["nodes"]:
            if "cpe_match" in cpe:
                for cpeuri in cpe["cpe_match"]:
                    if cpeuri["vulnerable"]:
                        query, version_info = get_cpe_info(cpeuri)
                        if query != {}:
                            query["id"] = hashlib.sha1(
                                cpeuri["cpe23Uri"].encode("utf-8")
                                + version_info.encode("utf-8")
                            ).hexdigest()
                            cpe_info = db.getCPEVersionInformation(query)
                            if cpe_info:
                                if cpe_info["cpe_name"]:
                                    for vulnerable_version in cpe_info["cpe_name"]:
                                        cve = add_if_missing(
                                            cve,
                                            "vulnerable_product",
                                            vulnerable_version["cpe23Uri"],
                                        )
                                        cve = add_if_missing(
                                            cve,
                                            "vulnerable_configuration",
                                            vulnerable_version["cpe23Uri"],
                                        )
                                else:
                                    cve = add_if_missing(
                                        cve, "vulnerable_product", cpeuri["cpe23Uri"]
                                    )
                                    cve = add_if_missing(
                                        cve,
                                        "vulnerable_configuration",
                                        cpeuri["cpe23Uri"],
                                    )
                        else:
                            # If the cpe_match did not have any of the version start/end modifiers,
                            # add the CPE string as it is.
                            cve = add_if_missing(
                                cve, "vulnerable_product", cpeuri["cpe23Uri"]
                            )
                            cve = add_if_missing(
                                cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                            )
                    else:
                        cve = add_if_missing(
                            cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                        )
            if "children" in cpe:
                for child in cpe["children"]:
                    if "cpe_match" in child:
                        for cpeuri in child["cpe_match"]:
                            if cpeuri["vulnerable"]:
                                query, version_info = get_cpe_info(cpeuri)
                                if query != {}:
                                    query["id"] = hashlib.sha1(
                                        cpeuri["cpe23Uri"].encode("utf-8")
                                        + version_info.encode("utf-8")
                                    ).hexdigest()
                                    cpe_info = db.getCPEVersionInformation(query)
                                    if cpe_info:
                                        if cpe_info["cpe_name"]:
                                            for vulnerable_version in cpe_info[
                                                "cpe_name"
                                            ]:
                                                cve = add_if_missing(
                                                    cve,
                                                    "vulnerable_product",
                                                    vulnerable_version["cpe23Uri"],
                                                )
                                                cve = add_if_missing(
                                                    cve,
                                                    "vulnerable_configuration",
                                                    vulnerable_version["cpe23Uri"],
                                                )
                                        else:
                                            cve = add_if_missing(
                                                cve,
                                                "vulnerable_product",
                                                cpeuri["cpe23Uri"],
                                            )
                                            cve = add_if_missing(
                                                cve,
                                                "vulnerable_configuration",
                                                cpeuri["cpe23Uri"],
                                            )
                                else:
                                    # If the cpe_match did not have any of the version start/end modifiers,
                                    # add the CPE string as it is.
                                    cve = add_if_missing(
                                        cve, "vulnerable_product", cpeuri["cpe23Uri"]
                                    )
                                    cve = add_if_missing(
                                        cve,
                                        "vulnerable_configuration",
                                        cpeuri["cpe23Uri"],
                                    )
                            else:
                                cve = add_if_missing(
                                    cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                                )
    if "problemtype" in item["cve"]:
        for problem in item["cve"]["problemtype"]["problemtype_data"]:
            for cwe in problem[
                "description"
            ]:  # NVD JSON not clear if we can get more than one CWE per CVE (until we take the last one) -
                # NVD-CWE-Other??? list?
                if cwe["lang"] == "en":
                    cve["cwe"] = cwe["value"]
        if not ("cwe" in cve):
            cve["cwe"] = defaultvalue["cwe"]
    else:
        cve["cwe"] = defaultvalue["cwe"]
    cve["vulnerable_configuration_cpe_2_2"] = []
    return cve


class CVEDownloads(JSONFileHandler):
    def __init__(self):
        self.feed_type = "CVES"
        self.prefix = "CVE_Items.item"
        super().__init__(self.feed_type, self.prefix)

        self.queue = Queue()

        self.feed_url = Configuration.getFeedURL("cve")
        self.modfile = file_prefix + file_mod + file_suffix
        self.recfile = file_prefix + file_rec + file_suffix

        self.is_update = True

        self.logger = logging.getLogger("CVEDownloads")

    @staticmethod
    def get_cve_year_range():
        """
        Method to fetch the years where we need cve's for
        """
        for a_year in range(cveStartYear, year):
            yield a_year

    def process_item(self, item):
        cve = process_cve_item(item)

        if self.is_update:
            self.queue.put(
                UpdateOne(
                    {"id": cve["id"]},
                    {
                        "$set": {
                            "cvss": cve["cvss"],
                            "summary": cve["summary"],
                            "references": cve["references"],
                            "impact": cve["impact"],
                            "vulnerable_product": cve["vulnerable_product"],
                            "access": cve["access"],
                            "cwe": cve["cwe"],
                            "vulnerable_configuration": cve["vulnerable_configuration"],
                            "vulnerable_configuration_cpe_2_2": cve[
                                "vulnerable_configuration_cpe_2_2"
                            ],
                            "last-modified": cve["Modified"],
                        }
                    },
                    upsert=True,
                )
            )
        else:
            self.queue.put(
                InsertOne(
                    {
                        "cvss": cve["cvss"],
                        "summary": cve["summary"],
                        "references": cve["references"],
                        "impact": cve["impact"],
                        "vulnerable_product": cve["vulnerable_product"],
                        "access": cve["access"],
                        "cwe": cve["cwe"],
                        "vulnerable_configuration": cve["vulnerable_configuration"],
                        "vulnerable_configuration_cpe_2_2": cve[
                            "vulnerable_configuration_cpe_2_2"
                        ],
                        "last-modified": cve["Modified"],
                    }
                )
            )

    def update(self):

        self.logger.info("CVE database update started")

        self.process_downloads(
            [self.feed_url + self.modfile, self.feed_url + self.recfile],
            self.queue,
            collection=self.feed_type.lower(),
        )

        db.setColUpdate(self.feed_type.lower(), self.last_modified)

        self.logger.info("Finished CVE database update")

        return self.last_modified

    def populate(self):

        self.logger.info("CVE database population started")

        self.is_update = False

        db.dropCollection("cves")

        for x in self.get_cve_year_range():
            getfile = file_prefix + str(x) + file_suffix

            urls.append(self.feed_url + getfile)

        self.process_downloads(urls, self.queue, collection=self.feed_type.lower())

        db.setColUpdate(self.feed_type.lower(), self.last_modified)

        self.logger.info("Finished CVE database population")

        return self.last_modified


if __name__ == "__main__":
    cvd = CVEDownloads()

    cvd.logger.debug("{}".format(" ".join(sys.argv)))

    if args.u:

        last_modified = cvd.update()

    elif args.p:
        c = db.getSize(cvd.feed_type.lower())
        if args.v:
            cvd.logger.info(str(c))
        if c > 0 and args.a is False:
            cvd.logger.info("database already populated")
        else:
            urls = []

            last_modified = cvd.populate()
