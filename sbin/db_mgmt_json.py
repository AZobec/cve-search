#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Manager for the database for the NVD JSON Files
#
# Current import is mapping all the old XML scheme from the NVD JSON files (WiP)
#
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2019 	Alexandre Dulaunoy - a@foo.be

# Imports
# make sure these modules are available on your system
import gzip
import hashlib
import os
import shutil
import sys
import tempfile
from io import BytesIO
from multiprocessing import Queue

import ijson as ijson
from pymongo import UpdateOne

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.DownloadHandler import DownloadHandler

import argparse
import datetime

from dateutil.parser import parse as parse_datetime

from lib.Config import Configuration
import lib.DatabaseLayer as db

last_modified = None

# parse command line arguments
argparser = argparse.ArgumentParser(
    description="populate/update the local CVE database"
)
argparser.add_argument("-u", action="store_true", help="update the database")
argparser.add_argument("-p", action="store_true", help="populate the database")
argparser.add_argument(
    "-a", action="store_true", default=False, help="force populating the CVE database"
)
argparser.add_argument(
    "-f", action="store_true", default=False, help="force update of the CVE database"
)
argparser.add_argument("-v", action="store_true", help="verbose output")
args = argparser.parse_args()


# init parts of the file names to enable looped file download
file_prefix = "nvdcve-1.1-"
file_suffix = ".json.gz"
file_mod = "modified"
file_rec = "recent"

date = datetime.datetime.now()
year = date.year + 1

# default config
defaultvalue = {"cwe": "Unknown"}

cveStartYear = Configuration.getCVEStartYear()


def get_cpe_info(cpeuri):
    query = {}
    version_info = ""
    if "versionStartExcluding" in cpeuri:
        query["versionStartExcluding"] = cpeuri["versionStartExcluding"]
        version_info += query["versionStartExcluding"]
    if "versionStartIncluding" in cpeuri:
        query["versionStartIncluding"] = cpeuri["versionStartIncluding"]
        version_info += query["versionStartIncluding"]
    if "versionEndExcluding" in cpeuri:
        query["versionEndExcluding"] = cpeuri["versionEndExcluding"]
        version_info += query["versionEndExcluding"]
    if "versionEndIncluding" in cpeuri:
        query["versionEndIncluding"] = cpeuri["versionEndIncluding"]
        version_info += query["versionEndIncluding"]

    return query, version_info


def add_if_missing(cve, key, value):
    if value not in cve[key]:
        cve[key].append(value)
    return cve


def process_cve_item(item=None):
    if item is None:
        return None

    cve = {
        "id": item["cve"]["CVE_data_meta"]["ID"],
        "assigner": item["cve"]["CVE_data_meta"]["ASSIGNER"],
        "Published": parse_datetime(item["publishedDate"], ignoretz=True),
        "Modified": parse_datetime(item["lastModifiedDate"], ignoretz=True),
    }

    for description in item["cve"]["description"]["description_data"]:
        if description["lang"] == "en":
            if "summary" in cve:
                cve["summary"] += " {}".format(description["value"])
            else:
                cve["summary"] = description["value"]
    if "impact" in item:
        cve["access"] = {}
        cve["impact"] = {}
        if "baseMetricV2" in item["impact"]:
            cve["access"]["authentication"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "authentication"
            ]
            cve["access"]["complexity"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "accessComplexity"
            ]
            cve["access"]["vector"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "accessVector"
            ]
            cve["impact"]["availability"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "availabilityImpact"
            ]
            cve["impact"]["confidentiality"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "confidentialityImpact"
            ]
            cve["impact"]["integrity"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "integrityImpact"
            ]
            cve["cvss"] = float(item["impact"]["baseMetricV2"]["cvssV2"]["baseScore"])
            cve["cvss-time"] = parse_datetime(
                item["lastModifiedDate"], ignoretz=True
            )  # NVD JSON lacks the CVSS time which was present in the original XML format
            cve["cvss-vector"] = item["impact"]["baseMetricV2"]["cvssV2"][
                "vectorString"
            ]
        else:
            cve["cvss"] = float(5)
    if "references" in item["cve"]:
        cve["references"] = []
        for ref in item["cve"]["references"]["reference_data"]:
            cve["references"].append(ref["url"])
    if "configurations" in item:
        cve["vulnerable_configuration"] = []
        cve["vulnerable_product"] = []
        for cpe in item["configurations"]["nodes"]:
            if "cpe_match" in cpe:
                for cpeuri in cpe["cpe_match"]:
                    if cpeuri["vulnerable"]:
                        query, version_info = get_cpe_info(cpeuri)
                        if query != {}:
                            query["id"] = hashlib.sha1(
                                cpeuri["cpe23Uri"].encode("utf-8")
                                + version_info.encode("utf-8")
                            ).hexdigest()
                            cpe_info = db.getCPEVersionInformation(query)
                            if cpe_info:
                                if cpe_info["cpe_name"]:
                                    for vulnerable_version in cpe_info["cpe_name"]:
                                        cve = add_if_missing(
                                            cve,
                                            "vulnerable_product",
                                            vulnerable_version["cpe23Uri"],
                                        )
                                        cve = add_if_missing(
                                            cve,
                                            "vulnerable_configuration",
                                            vulnerable_version["cpe23Uri"],
                                        )
                                else:
                                    cve = add_if_missing(
                                        cve, "vulnerable_product", cpeuri["cpe23Uri"]
                                    )
                                    cve = add_if_missing(
                                        cve,
                                        "vulnerable_configuration",
                                        cpeuri["cpe23Uri"],
                                    )
                        else:
                            # If the cpe_match did not have any of the version start/end modifiers,
                            # add the CPE string as it is.
                            cve = add_if_missing(
                                cve, "vulnerable_product", cpeuri["cpe23Uri"]
                            )
                            cve = add_if_missing(
                                cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                            )
                    else:
                        cve = add_if_missing(
                            cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                        )
            if "children" in cpe:
                for child in cpe["children"]:
                    if "cpe_match" in child:
                        for cpeuri in child["cpe_match"]:
                            if cpeuri["vulnerable"]:
                                query, version_info = get_cpe_info(cpeuri)
                                if query != {}:
                                    query["id"] = hashlib.sha1(
                                        cpeuri["cpe23Uri"].encode("utf-8")
                                        + version_info.encode("utf-8")
                                    ).hexdigest()
                                    cpe_info = db.getCPEVersionInformation(query)
                                    if cpe_info:
                                        if cpe_info["cpe_name"]:
                                            for vulnerable_version in cpe_info[
                                                "cpe_name"
                                            ]:
                                                cve = add_if_missing(
                                                    cve,
                                                    "vulnerable_product",
                                                    vulnerable_version["cpe23Uri"],
                                                )
                                                cve = add_if_missing(
                                                    cve,
                                                    "vulnerable_configuration",
                                                    vulnerable_version["cpe23Uri"],
                                                )
                                        else:
                                            cve = add_if_missing(
                                                cve,
                                                "vulnerable_product",
                                                cpeuri["cpe23Uri"],
                                            )
                                            cve = add_if_missing(
                                                cve,
                                                "vulnerable_configuration",
                                                cpeuri["cpe23Uri"],
                                            )
                                else:
                                    # If the cpe_match did not have any of the version start/end modifiers,
                                    # add the CPE string as it is.
                                    cve = add_if_missing(
                                        cve, "vulnerable_product", cpeuri["cpe23Uri"]
                                    )
                                    cve = add_if_missing(
                                        cve,
                                        "vulnerable_configuration",
                                        cpeuri["cpe23Uri"],
                                    )
                            else:
                                cve = add_if_missing(
                                    cve, "vulnerable_configuration", cpeuri["cpe23Uri"]
                                )
    if "problemtype" in item["cve"]:
        for problem in item["cve"]["problemtype"]["problemtype_data"]:
            for cwe in problem[
                "description"
            ]:  # NVD JSON not clear if we can get more than one CWE per CVE (until we take the last one) -
                # NVD-CWE-Other??? list?
                if cwe["lang"] == "en":
                    cve["cwe"] = cwe["value"]
        if not ("cwe" in cve):
            cve["cwe"] = defaultvalue["cwe"]
    else:
        cve["cwe"] = defaultvalue["cwe"]
    cve["vulnerable_configuration_cpe_2_2"] = []
    return cve


class CVEDownloads(DownloadHandler):
    def __init__(self):
        super().__init__()

        self.feed_url = Configuration.getFeedURL("cve")
        self.modfile = file_prefix + file_mod + file_suffix
        self.recfile = file_prefix + file_rec + file_suffix

        self.queue = Queue()

    def get_cve_year_range(self):
        """
        Method to fetch the years where we need cve's for
        """
        for a_year in range(cveStartYear, year):
            yield a_year

    def download_site(self, url):
        global last_modified
        print("Downloading: {}...".format(url))
        session = self.get_session()
        with session.get(url) as response:
            last_modified = parse_datetime(
                response.headers["last-modified"], ignoretz=True
            )

            i = db.getInfo("cves")

            if i is not None:
                if last_modified == i["last-modified"] and not args.f:
                    print("CVE's are not modified since the last update")
                    return

            # print("Read {} from {}".format(len(response.content), url))
            wd = tempfile.mkdtemp()
            filename = os.path.join(wd, url.split("/")[-1][:-3])
            # print("Saving file to: {}".format(filename))
            buf = BytesIO(response.content)
            with open(filename, "wb") as f:
                f.write(gzip.GzipFile(fileobj=buf).read())

            self.stream_json(filename=filename)

    def stream_json(self, filename):

        file_name = filename.split("/")[-1]

        print("Processing: {}".format(file_name))
        total_count = 0
        bulk_commands = []
        with open(filename, "rb") as input_file:
            for count in ijson.items(input_file, "CVE_data_numberOfCVEs"):
                total_count = count
        with open(filename, "rb") as input_file:
            x = 1
            for cve in ijson.items(input_file, "CVE_Items.item"):
                if cve["cve"]["data_type"] == "CVE":
                    # print counter every 500 hits
                    if x % 500 == 0:
                        print(
                            "{} --> Processing cve {} of {}".format(
                                file_name, x, total_count
                            )
                        )
                    self.queue.put(self.process_cves(cveitem=cve))
                    x += 1

            # db.bulkUpdate("cves", bulk_commands, total_count)
            # self.process_chunks_in_function(self.do_update, self.chunk_list(bulk_commands, 1000))

            print("Finished processing file: {}".format(file_name))

        shutil.rmtree(filename)

    def do_update(self, lst):

        db.bulkUpdate("cves", lst, len(lst))

    def process_cves(self, cveitem):
        cve = process_cve_item(cveitem)
        return UpdateOne(
            {"id": cve["id"]},
            {
                "$set": {
                    "cvss": cve["cvss"],
                    "summary": cve["summary"],
                    "references": cve["references"],
                    "impact": cve["impact"],
                    "vulnerable_product": cve["vulnerable_product"],
                    "access": cve["access"],
                    "cwe": cve["cwe"],
                    "vulnerable_configuration": cve["vulnerable_configuration"],
                    "vulnerable_configuration_cpe_2_2": cve[
                        "vulnerable_configuration_cpe_2_2"
                    ],
                    "last-modified": cve["Modified"],
                }
            },
            upsert=True,
        )

    def update(self):

        self.process_downloads(
            [self.feed_url + self.modfile, self.feed_url + self.recfile],
            self.queue,
            collection="cves",
        )

    def populate(self):

        db.dropCollection("cves")

        for x in self.get_cve_year_range():
            getfile = file_prefix + str(x) + file_suffix

            urls.append(self.feed_url + getfile)

        self.process_downloads(urls, self.queue, collection="cves")


if __name__ == "__main__":

    if args.u:

        print("CVE database update started")

        cvd = CVEDownloads()

        cvd.update()

        print("Finished CVE database update")

        db.setColUpdate("cves", last_modified)

    elif args.p:
        c = db.getSize("cves")
        if args.v:
            print(str(c))
        if c > 0 and args.a is False:
            print("database already populated")
        else:
            print("CVE database population started")

            urls = []

            cvd = CVEDownloads()

            cvd.populate()

            print("Finished CVE database population")

            db.setColUpdate("cves", last_modified)
