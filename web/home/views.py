import urllib
from collections import defaultdict

from flask import render_template, request, jsonify

from lib.CVEs import CveHandler
from lib.DatabaseLayer import getCWEs, getCAPECFor, getCAPEC, cvesForCPE
from lib.Query import getBrowseList
from . import home
from .utils import (
    defaultFilters,
    filter_logic,
    config_args,
    getFilterSettingsFromPost,
    get_plugins,
    markCPEs,
    plugManager,
    pluginArgs,
)
from ..run import app


@home.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        cve = filter_logic(defaultFilters, 0)
        return render_template("index.html", cve=cve, r=0, **config_args)
    else:
        # POST request
        args = dict(getFilterSettingsFromPost(0), **config_args)
        return render_template("index.html", r=0, **args)


@home.route("/r/<int:r>", methods=["GET", "POST"])
def pagination(r):
    if request.method == "GET":
        if not r or r < 0:
            r = 0
        cve = filter_logic(defaultFilters, r)
        return render_template("index.html", cve=cve, r=r, **config_args)
    else:
        if not r or r < 0:
            r = 0
        args = dict(getFilterSettingsFromPost(r), **config_args)
        return render_template("index.html", r=r, **args)


@home.route("/browse")
@home.route("/browse/<vendor>")
def browse_vendor(vendor=None):
    if vendor is None:
        data = getBrowseList(None)
    else:
        vendor = urllib.parse.quote_plus(vendor).lower()
        data = getBrowseList(vendor=vendor)

    if "product" in data and "vendor" in data:
        return render_template(
            "browse.html", product=data["product"], vendor=data["vendor"]
        )
    else:
        return render_template(
            "error.html", status={"except": "browse_exception", "info": "No CPE"}
        )


@home.route("/cve/<cve_id>")
def cve(cve_id):
    cvesp = CveHandler(
        rankinglookup=True,
        namelookup=True,
        via4lookup=True,
        capeclookup=True,
        subscorelookup=True,
    )
    cve = cvesp.getcve(cveid=cve_id.upper())
    if cve is None:
        return render_template(
            "error.html", status={"except": "cve-not-found", "info": {"cve": cve_id}}
        )

    if app.config["WebInterface"]:
        cve = markCPEs(cve)

        plugManager.onCVEOpen(cve_id, **pluginArgs)
        pluginData = plugManager.cvePluginInfo(cve_id, **pluginArgs)
        return render_template("cve.html", cve=cve, plugins=pluginData)
    else:
        return render_template("cve.html", cve=cve)


@home.route("/cwe")
@home.route("/cwe/<cwe_id>")
def get_cwe(cwe_id=None):
    data = getCWEs()
    if cwe_id is None:
        cwes = [x for x in data if x["weaknessabs"].lower() == "class"]
        return render_template("cwe.html", cwes=cwes, capec=None)
    else:
        cwes = {x["id"]: x["name"] for x in data}
        return render_template(
            "cwe.html", cwes=cwes, cwe=cwe_id, capec=getCAPECFor(cwe_id), minimal=True,
        )


@home.route("/capec/<capec_id>")
def capec(capec_id):
    data = getCWEs()
    cwes = {x["id"]: x["name"] for x in data}

    req_capec = getCAPEC(capec_id)

    rel_capecs = defaultdict(dict)

    if len(req_capec["related_capecs"]) != 0:
        for each in req_capec["related_capecs"]:
            rel_capecs[each] = getCAPEC(each)["summary"]

    return render_template(
        "capec.html", cwes=cwes, capecs=dict(rel_capecs), capec=req_capec
    )


@home.route("/_get_plugins")
def fetch_plugins():

    plugins = get_plugins()

    return jsonify({"plugins": plugins})


@home.route("/search/<vendor>/<product>")
def search(vendor=None, product=None):
    search = vendor + ":" + product
    cve = cvesForCPE(search)
    return render_template("search.html", vendor=vendor, product=product, cve=cve)
