import logging
import re
import urllib
from collections import defaultdict

from flask import render_template, request, jsonify, url_for
from flask_breadcrumbs import register_breadcrumb, default_breadcrumb_root

from lib.CVEs import CveHandler
from lib.DatabaseHandler import DatabaseHandler
from lib.DatabaseLayer import getCWEs, getCAPECFor, getCAPEC, cvesForCPE, getSearchResults, via4Linked
from lib.LogHandler import AppLogger
from lib.Query import getBrowseList
from . import home
from .utils import (
    defaultFilters,
    config_args,
    get_plugins,
    markCPEs,
    plugManager,
    pluginArgs, generate_full_query,
)
from ..helpers.server_side_datatables import ServerSideDataTable
from ..run import app

logging.setLoggerClass(AppLogger)

logger = logging.getLogger(__name__)

DATATABLE_FILTER = defaultFilters

default_breadcrumb_root(home, ".")


@home.route("/", methods=["GET"])
@register_breadcrumb(home, ".", "CVE-Search")
def index():
    # if request.method == "GET":
    # cve = filter_logic(defaultFilters, 0)
    return render_template("index.html", **config_args)
    # else:
    #     # POST request
    #     args = dict(getFilterSettingsFromPost(0), **config_args)
    #     return render_template("index.html", r=0, **args)


# @home.route("/r/<int:r>", methods=["GET", "POST"])
# def pagination(r):
#     if request.method == "GET":
#         if not r or r < 0:
#             r = 0
#         cve = filter_logic(defaultFilters, r)
#         return render_template("index.html", cve=cve, r=r, **config_args)
#     else:
#         if not r or r < 0:
#             r = 0
#         args = dict(getFilterSettingsFromPost(r), **config_args)
#         return render_template("index.html", r=r, **args)


@home.route("/browse")
@home.route("/browse/<vendor>")
def browse_vendor(vendor=None):
    if vendor is None:
        data = getBrowseList(None)
    else:
        vendor = urllib.parse.quote_plus(vendor).lower()
        data = getBrowseList(vendor=vendor)

    if "product" in data and "vendor" in data:
        return render_template(
            "browse.html", product=data["product"], vendor=data["vendor"]
        )
    else:
        return render_template(
            "error.html", status={"except": "browse_exception", "info": "No CPE"}
        )


def view_cve_id_name(*args, **kwargs):
    return [
        {
            "text": request.view_args["cve_id"],
            "url": "/cve/{}".format(request.view_args["cve_id"]),
        }
    ]


@home.route("/cve/<cve_id>")
@register_breadcrumb(
    home, ".CVE-Search", "", dynamic_list_constructor=view_cve_id_name
)
def cve(cve_id):
    cvesp = CveHandler(
        rankinglookup=True,
        namelookup=True,
        via4lookup=True,
        capeclookup=True,
        subscorelookup=True,
    )
    cve = cvesp.getcve(cveid=cve_id.upper())
    if cve is None:
        return render_template(
            "error.html", status={"except": "cve-not-found", "info": {"cve": cve_id}}
        )

    if app.config["WebInterface"]:
        cve = markCPEs(cve)

        plugManager.onCVEOpen(cve_id, **pluginArgs)
        pluginData = plugManager.cvePluginInfo(cve_id, **pluginArgs)
        return render_template("cve.html", cve=cve, plugins=pluginData)
    else:
        return render_template("cve.html", cve=cve)


@home.route("/cwe")
@home.route("/cwe/<cwe_id>")
def get_cwe(cwe_id=None):
    data = getCWEs()
    if cwe_id is None:
        cwes = [x for x in data if x["weaknessabs"].lower() == "class"]
        return render_template("cwe.html", cwes=cwes, capec=None)
    else:
        cwes = {x["id"]: x["name"] for x in data}
        return render_template(
            "cwe.html", cwes=cwes, cwe=cwe_id, capec=getCAPECFor(cwe_id), minimal=True,
        )


@home.route("/capec/<capec_id>")
def capec(capec_id):
    data = getCWEs()
    cwes = {x["id"]: x["name"] for x in data}

    req_capec = getCAPEC(capec_id)

    rel_capecs = defaultdict(dict)

    if len(req_capec["related_capecs"]) != 0:
        for each in req_capec["related_capecs"]:
            rel_capecs[each] = getCAPEC(each)["summary"]

    return render_template(
        "capec.html", cwes=cwes, capecs=dict(rel_capecs), capec=req_capec
    )


@home.route("/_get_plugins")
def fetch_plugins():

    plugins = get_plugins()

    return jsonify({"plugins": plugins})


@home.route("/search/<vendor>/<path:product>")
def search(vendor=None, product=None):
    search = vendor + ":" + product
    cve = cvesForCPE(search)
    return render_template("search.html", vendor=vendor, product=product, cve=cve)


@home.route("/search")
def freetext_search():
    search = request.form.get("search")
    if search == "":
        return url_for("home.index")
    result = getSearchResults(search)
    cve = {"results": result["data"], "total": len(result["data"])}
    errors = result["errors"] if "errors" in result else []
    return render_template(
        "search.html",
        cve=cve,
        errors=errors,
        freetextsearch=search,
    )


@home.route("/link/<key>/<value>")
def link(key=None, value=None):
    regex = re.compile(re.escape(value), re.I)
    cve = via4Linked(key, regex)
    cvssList = [float(x["cvss"]) for x in cve["results"] if x.get("cvss")]
    if cvssList:
        stats = {
            "maxCVSS": max(cvssList),
            "minCVSS": min(cvssList),
            "count": len(cve),
        }
    else:
        stats = {"maxCVSS": 0, "minCVSS": 0, "count": len(cve)}
    return render_template(
        "linked.html",
        via4map=key.split(".")[0],
        field=".".join(key.split(".")[1:]),
        value=value,
        cve=cve,
        stats=stats
    )


@home.route("/set_filter", methods=["POST"])
def set_filter():
    global DATATABLE_FILTER

    filter_params = dict(request.json)

    logger.debug("Received filter parameters: {}".format(filter_params))

    DATATABLE_FILTER = filter_params

    return "SET"


@home.route("/reset_filter")
def reset_filter():
    global DATATABLE_FILTER

    DATATABLE_FILTER = defaultFilters

    return "SET"


@home.route("/get_filter")
def get_filter():
    global DATATABLE_FILTER

    if DATATABLE_FILTER == defaultFilters:
        return jsonify(True)
    else:
        return jsonify(False)


@home.route("/fetch_cve_data", methods=["POST"])
def fetch_cvedata():
    global DATATABLE_FILTER

    logger.debug("Current filters set to: {}".format(DATATABLE_FILTER))

    dbh = DatabaseHandler()

    if DATATABLE_FILTER == defaultFilters:
        ssd = ServerSideDataTable(request=request, backend=dbh.connection)
    else:
        query_filters = generate_full_query(DATATABLE_FILTER)
        if len(query_filters) != 0:
            ssd = ServerSideDataTable(request=request, backend=dbh.connection, additional_filters=query_filters)
        else:
            ssd = ServerSideDataTable(request=request, backend=dbh.connection)

    return_data = ssd.output_result()

    return return_data
