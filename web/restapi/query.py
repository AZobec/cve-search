from flask import request
from flask_restx import Namespace, fields, Resource

from lib.ApiRequests import JSONApiRequest
from lib.DatabaseLayer import getDBStats
from web.home.utils import filter_logic, parse_headers
from web.restapi.cpe_convert import message
from web.restapi.cve import cve_last_entries

api = Namespace(
    "query", description="Endpoints for querying the cve search database", path="/"
)


query_entries = api.model(
    "QueryEntries",
    {
        "results": fields.List(
            fields.Nested(cve_last_entries),
            description="Results from query",
            example="",
        ),
        "total": fields.Integer(
            description="Total amount of records available for this query",
            example="150243",
        ),
    },
)

database_inner = api.model(
    "DBInner",
    {
        "last_update": fields.DateTime(
            description="Date time of last update", example="2019-09-30T18:53:48"
        ),
        "size": fields.Integer(
            description="Amount of documents in collection", example="570",
        ),
    },
)

database_wild = fields.Wildcard(
    fields.Nested(database_inner),
    description="Database collection mapping id",
    skip_none=True,
)

database_entry = api.model(
    "documents",
    {"*": database_wild},
)


@api.route("/query")
@api.response(400, "Error processing request", model=message)
@api.response(500, "Server error", model=message)
class QueryApi(Resource):
    @api.param(
        "rejected",
        "Hide or show rejected CVEs",
        example="hide/show",
        default="show",
        _in="header",
    )
    @api.param("cvss_score", "CVSS score", example=6.8, _in="header")
    @api.param(
        "cvss_modifier",
        "Select the CVSS score of the CVEs related to cvss_score",
        example="above/equals/below",
        _in="header",
    )
    @api.param(
        "time_start",
        "Earliest time for a CVE",
        example="dd-mm-yyyy or dd-mm-yy format, using - or /",
        _in="header",
    )
    @api.param(
        "time_end",
        "Latest time for a CVE",
        example="dd-mm-yyyy or dd-mm-yy format, using - or /",
        _in="header",
    )
    @api.param(
        "time_modifier",
        "Timeframe for the CVEs, related to the start and end time",
        example="from/until/between/outside",
        _in="header",
    )
    @api.param(
        "time_type",
        "Select which time is used for the filter",
        example="Modified/Published/last-modified",
        _in="header",
    )
    @api.param("skip", "Skip the n latest vulnerabilities", example=50, _in="header")
    @api.param(
        "limit",
        "Limit the amount of vulnerabilities to return",
        example=20,
        _in="header",
    )
    @api.marshal_with(query_entries, skip_none=True)
    def get(self):
        """
        Query for CVE's

        Returns a list of CVEs matching the criteria of the filters specified in the headers.
        """
        f = {
            "rejectedSelect": request.headers.get("rejected"),
            "cvss": request.headers.get("cvss_score"),
            "cvssSelect": request.headers.get("cvss_modifier"),
            "startDate": request.headers.get("time_start"),
            "endDate": request.headers.get("time_end"),
            "timeSelect": request.headers.get("time_modifier"),
            "timeTypeSelect": request.headers.get("time_type"),
            "skip": request.headers.get("skip"),
            "limit": request.headers.get("limit"),
        }

        try:
            skip = int(f["skip"]) if f["skip"] else 0
        except ValueError:
            api.abort(400, "Skip variable should be an integer")

        try:
            limit = int(f["limit"]) if f["limit"] else 0
        except ValueError:
            api.abort(400, "Limit variable should be an integer")

        results = filter_logic(f, skip, limit)

        if len(results) == 0:
            api.abort(404, "")
        else:
            return results

    def post(self):
        """
        Free query

        Api endpoint that can be used to freely (within the allowed parameters) query the cve search database.
        """
        headers = parse_headers(request.headers)
        try:
            body = request.json
        except Exception:
            return "Could not parse request body", 400

        result = self.database_connection.handle_api_json_query(
            JSONApiRequest(headers=headers, body=body)
        )

        return result


@api.route("/dbinfo")
@api.response(400, "Error processing request", model=message)
@api.response(500, "Server error", model=message)
class DBInfo(Resource):
    @api.marshal_with(database_entry)
    def get(self):
        """
        Get Database info

        Returns the stats of the database. When the user authenticates, more information is returned.

        This information includes:
        <ul>
          <li> Amount of whitelist and blacklist records </li>
          <li> Some server settings like the database name </li>
          <li> Some database information like disk usage </li>
        </ul>
        Unauthenticated queries return only collection information.
        """
        return getDBStats()
