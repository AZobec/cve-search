from flask_jwt_extended import jwt_required
from flask_restx import Namespace, Resource, fields

from lib.DatabaseLayer import getWhitelist, getBlacklist
from sbin.db_blacklist import dropBlacklist
from sbin.db_whitelist import dropWhitelist
from web.restapi.auth import message

api = Namespace("admin", description="Endpoints for admin", path="/admin/")

white_black_list = api.model(
    "WBList",
    {
        "id": fields.String(
            description="The id of a listed CPE",
            example="cpe:2.3:h:-:wireless_ip_camera_360:-:*:*:*:*:*:*:*",
        ),
        "type": fields.String(
            description="The type of the listed entry (cpe or type)", example="cpe",
        ),
        "comments": fields.List(
            fields.String,
            description="A list of given comments related to the entry",
            example=["Comment 1", "Comment 2", "Comment 3",],
        ),
    },
)


@api.route("/whitelist")
@api.response(400, "Error processing request", model=message)
@api.response(401, "Unauthorized or missing token in request", model=message)
@api.response(500, "Server error", model=message)
@api.param(
    name="Authorization",
    description="JWT Token",
    _in="header",
    required=True,
    example="Bearer 'extreme long jwt token'",
)
class WhitelistClass(Resource):
    @api.marshal_list_with(white_black_list)
    @jwt_required
    def get(self):
        """
        List Whitelist

        Returns the content of the whitelist.
        The whitelist is a list of CPEs that will mark a CVE when the CVE applies to the product.
        It is intended to be used as a notification/warning mechanism.
        There are three types of CPEs:
        <ul>
          <li>cpe - A fully qualified CPE code in CPE2.2 or CPE2.3 format</li>
          <li>targetsoftware - A software the CPE applies to. Equivalent to cpe:2.3:-:-:-:-:-:-:-:-:&lt;cpe&gt;</li>
          <li>targethardware - A hardware the CPE applies to. Equivalent to cpe:2.3:-:-:-:-:-:-:-:-:-:&lt;cpe&gt;</li>
        </ul>
        Other types are possible, but are not used by the software.
        """
        return getWhitelist()

    @api.marshal_with(message)
    @jwt_required
    def delete(self):
        """
        Drop Whitelist

        Drops the content of the whitelist.
        """
        return {"message": dropWhitelist()}


@api.route("/blacklist")
@api.response(400, "Error processing request", model=message)
@api.response(401, "Unauthorized or missing token in request", model=message)
@api.response(500, "Server error", model=message)
@api.param(
    name="Authorization",
    description="JWT Token",
    _in="header",
    required=True,
    example="Bearer 'extreme long jwt token'",
)
class BlacklistClass(Resource):
    @api.marshal_list_with(white_black_list)
    @jwt_required
    def get(self):
        """
        List Blacklist

        Returns the content of the blacklist.
        The blacklist is a list of CPEs that will hide a CVE when all the CPEs a product applies to are blacklisted.
        It is intended to be used as a way to hide unwanted information.
        There are three types of CPEs:
        <ul>
          <li>cpe - A fully qualified CPE code in CPE2.2 or CPE2.3 format</li>
          <li>targetsoftware - A software the CPE applies to. Equivalent to cpe:2.3:-:-:-:-:-:-:-:-:&lt;cpe&gt;</li>
          <li>targethardware - A hardware the CPE applies to. Equivalent to cpe:2.3:-:-:-:-:-:-:-:-:-:&lt;cpe&gt;</li>
        </ul>
        Other types are possible, but are not used by the software.
        """
        return getBlacklist()

    @api.marshal_with(message)
    @jwt_required
    def delete(self):
        """
        Drop Blacklist

        Drops the content of the blacklist.
        """
        return {"message": dropBlacklist()}
