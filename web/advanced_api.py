#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Minimal web interface to cve-search to display the last entries
# and view a specific CVE.
#
# Software is free software released under the "Modified BSD license"
#

# Copyright (c) 2017 	Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# imports
import json
import os
import sys
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

import lib.DatabaseLayer as db

from bson               import json_util
from flask              import Response, request
from functools          import wraps

from lib.Authentication import AuthenticationHandler
from lib.User           import User
from web.api            import API, APIError


class Advanced_API(API):
  def __init__(self):
    super().__init__()
    self.auth_handler = AuthenticationHandler()
    routes = [{'r': '/api/admin/whitelist',              'm': ['GET'], 'f': self.api_admin_whitelist},]
    for route in routes: self.addRoute(route)


  #############
  # Decorator #
  #############
  def token_required(funct):
    @wraps(funct)
    def api_token(*args, **kwargs):
      # Check auth
      method, auth = (request.headers.get('Authorization')+" ").split(" ", 1) # Adding and removing space to ensure decent split
      data = None
      if method.lower() not in ['basic', 'token']:
        data = {'status': 'error', 'reason': 'Authorization method not allowed'}
      else:
        try:
          name, token = (':'+auth.strip()).rsplit(":", 1)
          name = name[1:] # Adding and removing colon to ensure decent split
          if   method.lower() == 'basic':
            data = {'status': 'error', 'reason': 'Authorization method not yet implemented'}
          elif method.lower() == 'token':
            if not db.getToken(name) == token: data = {'status': 'error', 'reason': 'Authentication failed'}
        except Exception as e:
          print(e)
          data = {'status': 'error', 'reason': 'Malformed Authentication String'}
      if data:
        data = json.dumps(data, indent=2, sort_keys=True, default=json_util.default)
        return Response(data, mimetype='application/json')
      else: return API.api(funct)(*args, **kwargs)
    return api_token


  @token_required
  def api_admin_whitelist(self):
    return db.getWhitelist()

if __name__ == '__main__':
  server = Advanced_API()
  server.start()
