{% extends 'layouts/api-accordion-child'   %}
{% set id     = "capec"                    %}
{% set title  = "/api/capec/&lt;cweid&gt;" %}
{% set method = "GET"                      %}
{% set args   = [('cweid', "CWE ID", "200")] %}

{% block desc %}
Outputs a list of CAPEC related to a CWE. <br />
CAPEC (Common Attack Pattern Enumeration and Classification) are a list of attack types commonly used by attackers.
{% endblock %}

{% block output %}
[
    {
        "execution_flow": {},
        "id": "271",
        "loa": "Low",
        "name": "Schema Poisoning",
        "prerequisites": "Some level of access to modify the target schema. The schema used by the target application must be improperly secured against unauthorized modification and manipulation.",
        "related_capecs": [
            "176"
        ],
        "related_weakness": [
            "15"
        ],
        "solutions": "Design: Protect the schema against unauthorized modification. Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document. Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
        "summary": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
        "taxonomy": {},
        "typical_severity": "High"
    },
    {
        "execution_flow": {
            "1": {
                "Description": "The attacker probes for programs running with elevated privileges.",
                "Phase": "Explore",
                "Techniques": []
            },
            "2": {
                "Description": "The attacker finds a bug in a program running with elevated privileges.",
                "Phase": "Explore",
                "Techniques": []
            },
            "3": {
                "Description": "The attacker exploits the bug that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.",
                "Phase": "Exploit",
                "Techniques": []
            }
        },
        "id": "69",
        "loa": "High",
        "name": "Target Programs with Elevated Privileges",
        "prerequisites": "The targeted program runs with elevated OS privileges. The targeted program accepts input data from the user or from another program. The targeted program does not perform input validation properly. The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone. The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access). The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker. This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.",
        "related_capecs": [
            "10",
            "233",
            "67",
            "8",
            "9"
        ],
        "related_weakness": [
            "15",
            "250",
            "264"
        ],
        "solutions": "Apply the principle of least privilege. Validate all untrusted data. Apply the latest patches. Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them. Avoid revealing information about your system (e.g., version of the program) to anonymous users. Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs. If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage. Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code. Monitor traffic and resource usage and pay attention if resource exhaustion occurs. Protect your log file from unauthorized modification and log forging.",
        "summary": "This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.",
        "taxonomy": {},
        "typical_severity": "Very High"
    },
    {
        "execution_flow": {
            "1": {
                "Description": "The attacker probes the application for information. Which version of the application is running? Are there known environment variables? etc.",
                "Phase": "Explore",
                "Techniques": []
            },
            "2": {
                "Description": "The attacker gains control of an environment variable and ties to find out what process(es) the environment variable controls.",
                "Phase": "Experiment",
                "Techniques": []
            },
            "3": {
                "Description": "The attacker modifies the environment variable to abuse the normal flow of processes or to gain access to privileged resources.",
                "Phase": "Exploit",
                "Techniques": []
            }
        },
        "id": "13",
        "loa": "High",
        "name": "Subverting Environment Variable Values",
        "prerequisites": "An environment variable is accessible to the user. An environment variable used by the application can be tainted with user supplied data. Input data used in an environment variable is not validated properly. The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.",
        "related_capecs": [
            "10",
            "14",
            "77"
        ],
        "related_weakness": [
            "15",
            "20",
            "200",
            "285",
            "302",
            "353",
            "73",
            "74"
        ],
  ...
{% endblock %}
