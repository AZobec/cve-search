import logging
import os
import signal
import time

from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from tornado.wsgi import WSGIContainer

from lib.Config import Configuration
from lib.LogHandler import WebHandler
from web.run import create_app
from web.set_version import _version

_runPath = os.path.dirname(os.path.realpath(__file__))

config = Configuration()

logging.setLoggerClass(WebHandler)

logger = logging.getLogger(__name__)

http_server = None

__version__ = _version()


def sig_handler(sig):
    logger.info("Caught signal: {}".format(sig))
    IOLoop.instance().add_callback(shutdown)


def shutdown():
    global http_server
    MAX_WAIT_SECONDS_BEFORE_SHUTDOWN = 3
    logger.info("Stopping http server")
    http_server.stop()

    logger.info(
        "Will shutdown in {} seconds ...".format(MAX_WAIT_SECONDS_BEFORE_SHUTDOWN)
    )
    io_loop = IOLoop.instance()
    deadline = time.time() + MAX_WAIT_SECONDS_BEFORE_SHUTDOWN

    def stop_loop():
        now = time.time()
        if now < deadline and (io_loop._callbacks or io_loop._timeouts):
            io_loop.add_timeout(now + 1, stop_loop)
        else:
            io_loop.stop()
            logger.info("Shutdown")

    stop_loop()


def start():
    global http_server
    # get properties
    flaskHost = config.getFlaskHost()
    flaskPort = config.getFlaskPort()
    flaskDebug = config.getFlaskDebug()

    logger.info("Running version: {}".format(__version__))

    app = create_app(__version__, _runPath)

    if flaskDebug:
        # start debug flask server
        app.run(host=flaskHost, port=flaskPort, debug=flaskDebug)
    else:
        # start asynchronous server using tornado wrapper for flask
        # ssl connection
        print("Server starting...")
        if config.useSSL():
            ssl_options = {
                "certfile": os.path.join(_runPath, "../", config.getSSLCert()),
                "keyfile": os.path.join(_runPath, "../", config.getSSLKey()),
            }
        else:
            ssl_options = None
        signal.signal(signal.SIGTERM, sig_handler)
        signal.signal(signal.SIGINT, sig_handler)

        http_server = HTTPServer(WSGIContainer(app), ssl_options=ssl_options)
        http_server.bind(flaskPort, address=flaskHost)
        http_server.start(0)  # Forks multiple sub-processes
        IOLoop.instance().start()


start()
