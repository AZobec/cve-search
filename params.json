{
  "name": "Cve-search",
  "tagline": "cve-search - a tool to perform local searches for known vulnerabilities",
  "body": "cve-search\r\n==========\r\n\r\n[![Join the chat at https://gitter.im/cve-search/cve-search](https://badges.gitter.im/cve-search/cve-search.svg)](https://gitter.im/cve-search/cve-search?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n![cve-search logo](https://avatars3.githubusercontent.com/u/15033728?v=3&s=200)\r\n\r\n[![Build Status](https://travis-ci.org/cve-search/cve-search.svg?branch=master)](https://travis-ci.org/cve-search/cve-search)\r\n\r\ncve-search is a tool to import CVE (Common Vulnerabilities and Exposures) and\r\nCPE (Common Platform Enumeration) into a MongoDB to facilitate search\r\nand processing of CVEs.\r\n\r\nThe main objective of the software is to avoid doing direct and public lookup\r\ninto the public CVE databases. This is usually faster to do local lookups and\r\nlimits your sensitive queries via the Internet.\r\n\r\ncve-search includes a back-end to store vulnerabilities and related information,\r\nan intuitive web interface for search and managing vulnerabilities,\r\na series of tools to query the system and a web API interface.\r\n\r\ncve-search is used by many organizations including the [public CVE services of CIRCL](https://cve.circl.lu/).\r\n\r\nRequirements\r\n------------\r\n\r\n* Python3.3 or later\r\n* MongoDB 2.2 or later\r\n* redis server\r\n* Pip3\r\n  * PyMongo\r\n  * Flask\r\n  * Flask-PyMongo\r\n  * Flask-Login\r\n  * Tornado\r\n  * Whoosh\r\n  * Redis\r\n  * Python-dateutil\r\n  * passlib\r\n  * feedformater (for RSS and Atom dump_last) http://code.google.com/p/feedformatter/\r\n  * Whoosh http://packages.python.org/Whoosh/ (If you're planning to use the Full-text indexer)\r\n  * irc\r\n  * sleekxmpp\r\n  * Werkzeug\r\n  * Jinja2\r\n  * itsdangerous\r\n  * click\r\n\r\nThe requirements can be installed with pip:\r\n\r\n    sudo pip3 install -r requirements.txt\r\n\r\nInstallation of MongoDB\r\n-----------------------\r\n\r\nFirst, you'll need to have a Python 3 installation (3.3 or higher).\r\nThen you need to install MongoDB (2.2) from source (this should also work\r\nwith any standard packages from your favorite distribution). Don't forget\r\nto install the headers for development while installing MongoDB.\r\nYou can go to http://docs.mongodb.org/manual/installation/ for to get the\r\npackages for your distribution, or http://www.mongodb.org/downloads for\r\nthe source code.\r\n\r\n\r\nPopulating the database\r\n-----------------------\r\n\r\nFor the initial run, you need to populate the CVE database by running:\r\n\r\n    ./sbin/db_mgmt.py -p\r\n    ./sbin/db_mgmt_cpe_dictionary.py\r\n    ./sbin/db_updater.py -c\r\n\r\nIt will fetch all the existing XML files from the Common Vulnerabilities\r\nand Exposures database and the Common Platform Enumeration.\r\n\r\nA more detailed documentation can be found in the Documentations folder of the project.\r\n\r\nDatabases and collections\r\n-------------------------\r\n\r\nThe MongoDB database is called cvedb and there are 11 collections:\r\n\r\n* cves (Common Vulnerabilities and Exposure items) - source NVD NIST\r\n* cpe (Common Platform Enumeration items) - source NVD NIST\r\n* vendor (Official Vendor Statements on CVE Vulnerabilities) - source NVD NIST\r\n* cwe (Common Weakness Enumeration items) - source NVD NIST\r\n* capec (Common Attack Pattern Enumeration and Classification) - source NVD NIST\r\n* ranking (ranking rules per group) - local cve-search\r\n* d2sec (Exploitation reference from D2 Elliot Web Exploitation Framework) - source d2sec.com\r\n* [vFeed](https://github.com/toolswatch/vFeed) (cross-references to CVE ids (e.g. OVAL, OpenVAS, ...)) - source [vFeed](https://github.com/toolswatch/vFeed) - proprietary feed - [MITRE Reference Key/Maps](https://cve.mitre.org/data/refs/) is preferred\r\n* ms - (Microsoft Bulletin (Security Vulnerabilities and Bulletin)) - source [Microsoft](http://www.microsoft.com/en-us/download/details.aspx?id=36982)\r\n* exploitdb (Offensive Security - Exploit Database) - source [offensive security](https://github.com/offensive-security/exploit-database)\r\n* info (metadata of each collection like last-modified) - local cve-search\r\n\r\nThe Redis database has 3 databases:\r\n\r\n* 10: The cpe (Common Platform Enumeration) cache - source MongoDB cvedb collection cpe\r\n* 11: The notification database - source cve-search\r\n* 12: The [CVE reference database](https://cve.mitre.org/data/refs/) is a cross-reference database to CVE ids against various vendors ID - source NVD NIST/MITRE\r\n\r\n\r\nUpdating the database\r\n---------------------\r\n\r\nAn updater script helps to start the db_mgmt_*  \r\n\r\n    ./sbin/db_updater.py -v\r\n\r\nYou can run it in a crontab, logging is done in syslog by default.\r\n\r\nRepopulating the database\r\n-------------------------\r\n\r\nTo easily drop and re-populate all the databases\r\n\r\n    ./sbin/db_updater.py -v -f\r\n\r\nThis will drop all the existing external sources and reimport everything. This operation can take some time\r\nand it's usually only required when new attributes parsing are added in cve-search.\r\n\r\nUsage\r\n-----\r\n\r\nYou can search the database using search.py\r\n\r\n    ./bin/search.py -p cisco:ios:12.4\r\n    ./bin/search.py -p cisco:ios:12.4 -o json\r\n    ./bin/search.py -f nagios -n\r\n    ./bin/search.py -p microsoft:windows_7 -o html\r\n\r\nIf you want to search all the WebEx vulnerabilities and only printing the official\r\nreferences from the supplier.\r\n\r\n    ./bin/search.py -p webex: -o csv  -v \"cisco\"\r\n\r\nYou can also dump the JSON for a specific CVE ID.\r\n\r\n    ./bin/search.py -c CVE-2010-3333\r\n\r\nOr you can use the XMPP bot\r\n\r\n    ./bin/search_xmpp.py -j mybot@jabber.org -p strongpassword\r\n\r\nOr dump the last 2 CVE entries in RSS or Atom format\r\n\r\n    ./bin/dump_last.py -f atom -l 2\r\n\r\nOr you can use the webinterface.\r\n\r\n    ./web/index.py\r\n\r\nUsage of the ranking database\r\n-----------------------------\r\n\r\nThere is a ranking database allowing to rank software vulnerabilities based on\r\ntheir common platform enumeration name. The ranking can be done per organization\r\nor department within your organization or any meaningful name for you.\r\n\r\nAs an example, you can add a partial CPE name like \"sap:netweaver\" which is very\r\ncritical for your accounting department.\r\n\r\n    ./sbin/db_ranking.py  -c \"sap:netweaver\" -g \"accounting\" -r 3\r\n\r\nand then you can lookup the ranking (-r option) for a specific CVE-ID:\r\n\r\n    ./bin/search.py -c CVE-2012-4341  -r  -n\r\n\r\nAdvanced usage\r\n--------------\r\n\r\nAs cve-search is based on a set of tools, it can be used and combined with standard Unix tools. If you ever wonder what are the top vendors using the term \"unknown\" for their vulnerabilities:\r\n\r\n    python3 bin/search_fulltext.py -q unknown -f | jq -c '. | .vulnerable_configuration[0]' | cut -f3 -d: | sort  | uniq -c  | sort -nr | head -10\r\n\r\n    1500 oracle\r\n    381 sun\r\n    372 hp\r\n    232 google\r\n    208 ibm\r\n    126 mozilla\r\n    103 microsoft\r\n    100 adobe\r\n     78 apple\r\n     68 linux\r\n\r\nYou can compare CVSS (Common Vulnerability Scoring System ) values of some products based on their CPE name. Like comparing oracle:java versus sun:jre and using R to make some statistics about their CVSS values:\r\n\r\n    python3 bin/search.py -p oracle:java -o json  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\r\n    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\r\n    1.800   5.350   9.300   7.832  10.000  10.000\r\n\r\n\r\n    python3 bin/search.py -p sun:jre -o json  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\r\n    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\r\n    0.000   5.000   7.500   7.333  10.000  10.000\r\n\r\nFulltext indexing\r\n-----------------\r\n\r\nIf you want to index all the CVEs from your current MongoDB collection:\r\n\r\n    ./sbin/db_fulltext.py\r\n\r\nand you query the fulltext index (to get a list of matching CVE-ID):\r\n\r\n    ./bin/search_fulltext.py -q NFS -q Linux\r\n\r\nor to query the fulltext index and output the JSON object for each CVE-ID:\r\n\r\n    ./bin/search_fulltext.py -q NFS -q Linux -j\r\n\r\nFulltext visualization\r\n----------------------\r\n\r\nThe fulltext indexer visualization is using the fulltext indexes to build\r\na list of the most common keywords used in CVE. [NLTK](http://nltk.org/) is\r\nrequired to generate the keywords with the most common English\r\nstopwords and lemmatize the output. [NTLK for Python 3](http://nltk.org/nltk3-alpha/)\r\nexists but you need to use the alpha version of NLTK.\r\n\r\n    ./bin/search_fulltext.py  -g -s >cve.json\r\n\r\n![cve-search visualization](https://farm9.staticflickr.com/8109/8603509755_c7690c2de4_n.jpg \"CVE Keywords Visualization Using Data From cve-search\")\r\n\r\nYou can see a visualization on the [demo site](http://www.foo.be/cve/).\r\n\r\nWeb interface\r\n-------------\r\n\r\nThe web interface is a minimal interface to see the last CVE entries and\r\nquery a specific CVE. You'll need flask in order to run the website and [Flask-PyMongo](http://flask-pymongo.readthedocs.org/en/latest/). To start\r\nthe web interface:\r\n\r\n    cd ./web\r\n    ./index.py\r\n\r\nThen you can connect on http://127.0.0.1:5000/ to browser the last CVE.\r\n\r\nWeb API interface\r\n-----------------\r\n\r\nThe web interface includes a minimal JSON API to get CVE by ID, by vendor or product.\r\nA public version of the API is also accessible on [cve.circl.lu](https://cve.circl.lu/).\r\n\r\nList the know vendors in JSON\r\n\r\n~~~\r\ncurl http://127.0.0.1:5000/api/browse/\r\n~~~\r\n\r\nDump the product of a specific vendor in JSON\r\n\r\n~~~\r\ncurl  http://127.0.0.1:5000/api/browse/zyxel \r\n{\r\n  \"product\": [\r\n    \"n300_netusb_nbg-419n\",\r\n    \"n300_netusb_nbg-419n_firmware\",\r\n    \"p-660h-61\",\r\n    \"p-660h-63\",\r\n    \"p-660h-67\",\r\n    \"p-660h-d1\",\r\n    \"p-660h-d3\",\r\n    \"p-660h-t1\",\r\n    \"p-660h-t3\",\r\n    \"p-660hw\",\r\n    \"p-660hw_d1\",\r\n    \"p-660hw_d3\",\r\n    \"p-660hw_t3\"\r\n  ],\r\n  \"vendor\": \"zyxel\"\r\n}\r\n~~~\r\n\r\nFind the associated vulnerabilities to a vendor and a product\r\n\r\n~~~\r\ncurl  http://127.0.0.1:5000/api/search/zyxel/p-660hw\r\n[{\"cwe\": \"CWE-352\", \"references\": [\"http://www.exploit-db.com/exploits/33518\", \"http://secunia.com/advisories/58513\", \"http://packetstormsecurity.com/files/126812/Zyxel-P-660HW-T1-Cross-Site-Request-Forgery.html\", \"http://osvdb.org/show/osvdb/107449\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660hw:_t1:v3\"], \"Published\": \"2014-06-16T14:55:09.713-04:00\", \"id\": \"CVE-2014-4162\", \"Modified\": \"2014-07-17T01:07:29.683-04:00\", \"cvss\": 6.8, \"summary\": \"Multiple cross-site request forgery (CSRF) vulnerabilities in the Zyxel P-660HW-T1 (v3) wireless router allow remote attackers to hijack the authentication of administrators for requests that change the (1) wifi password or (2) SSID via a request to Forms/WLAN_General_1.\"}, {\"cwe\": \"CWE-20\", \"references\": [\"http://www.kb.cert.org/vuls/id/893726\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660h-63:-\", \"cpe:/h:zyxel:p-660h-t1:-\", \"cpe:/h:zyxel:p-660h-d3:-\", \"cpe:/h:zyxel:p-660h-t3:v2\", \"cpe:/h:zyxel:p-660h-t1:v2\", \"cpe:/h:zyxel:p-660h-d1:-\", \"cpe:/h:zyxel:p-660h-67:-\", \"cpe:/h:zyxel:p-660h-61:-\", \"cpe:/h:zyxel:p-660hw_t3:v2\", \"cpe:/h:zyxel:p-660hw_t3:-\", \"cpe:/h:zyxel:p-660hw_d3:-\", \"cpe:/h:zyxel:p-660hw_d1:v2\", \"cpe:/h:zyxel:p-660hw_d1:-\", \"cpe:/h:zyxel:p-660hw:_t1:v2\", \"cpe:/h:zyxel:p-660hw:_t1:-\"], \"Published\": \"2014-04-01T23:58:16.967-04:00\", \"id\": \"CVE-2013-3588\", \"Modified\": \"2014-04-02T11:29:53.243-04:00\", \"cvss\": 7.8, \"summary\": \"The web management interface on Zyxel P660 devices allows remote attackers to cause a denial of service (reboot) via a flood of TCP SYN packets.\"}, {\"cwe\": \"CWE-79\", \"references\": [\"http://osvdb.org/ref/99/rompager407.pdf\", \"http://osvdb.org/99694\", \"http://antoniovazquezblanco.github.io/docs/advisories/Advisory_RomPagerXSS.pdf\"], \"vulnerable_configuration\": [\"cpe:/h:d-link:dsl-2640r:-\", \"cpe:/h:d-link:dsl-2641r:-\", \"cpe:/h:huawei:mt882:-\", \"cpe:/h:sitecom:wl-174:-\", \"cpe:/h:tp-link:td-8816:-\", \"cpe:/a:allegrosoft:rompager:4.07\", \"cpe:/h:zyxel:p-660hw_d1:-\"], \"Published\": \"2014-01-16T14:55:04.607-05:00\", \"id\": \"CVE-2013-6786\", \"Modified\": \"2014-01-17T11:01:47.353-05:00\", \"cvss\": 4.3, \"summary\": \"Cross-site scripting (XSS) vulnerability in Allegro RomPager before 4.51, as used on the ZyXEL P660HW-D1, Huawei MT882, Sitecom WL-174, TP-LINK TD-8816, and D-Link DSL-2640R and DSL-2641R, when the \\\"forbidden author header\\\" protection mechanism is bypassed, allows remote attackers to inject arbitrary web script or HTML by requesting a nonexistent URI in conjunction with a crafted HTTP Referer header that is not properly handled in a 404 page.  NOTE: there is no CVE for a \\\"URL redirection\\\" issue that some sources list separately.\"}, {\"cwe\": \"CWE-79\", \"references\": [\"http://xforce.iss.net/xforce/xfdb/41109\", \"http://www.securityfocus.com/archive/1/archive/1/489009/100/0/threaded\", \"http://www.gnucitizen.org/projects/router-hacking-challenge/\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660hw_t3:v2\", \"cpe:/h:zyxel:p-660hw:_t1:v2\", \"cpe:/h:zyxel:p-660hw_d1:v2\", \"cpe:/h:zyxel:p-660hw_t3:-\", \"cpe:/h:zyxel:p-660hw:_t1:-\", \"cpe:/h:zyxel:p-660hw_d3:-\", \"cpe:/h:zyxel:p-660hw_d1:-\"], \"Published\": \"2008-03-10T13:44:00.000-04:00\", \"id\": \"CVE-2008-1257\", \"Modified\": \"2012-05-31T00:00:00.000-04:00\", \"cvss\": 4.3, \"summary\": \"Cross-site scripting (XSS) vulnerability in Forms/DiagGeneral_2 on the ZyXEL P-660HW series router allows remote attackers to inject arbitrary web script or HTML via the PingIPAddr parameter.\"}, {\"id\": \"CVE-2008-1256\", \"references\": [\"http://xforce.iss.net/xforce/xfdb/41108\", \"http://www.securityfocus.com/archive/1/archive/1/489009/100/0/threaded\", \"http://www.gnucitizen.org/projects/router-hacking-challenge/\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660hw\"], \"Published\": \"2008-03-10T13:44:00.000-04:00\", \"Modified\": \"2011-03-07T22:06:25.080-05:00\", \"cvss\": 10.0, \"summary\": \"The ZyXEL P-660HW series router has \\\"admin\\\" as its default password, which allows remote attackers to gain administrative access.\"}, {\"cwe\": \"CWE-264\", \"references\": [\"http://www.securityfocus.com/archive/1/archive/1/489009/100/0/threaded\", \"http://www.gnucitizen.org/projects/router-hacking-challenge/\", \"http://xforce.iss.net/xforce/xfdb/41114\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660hw\"], \"Published\": \"2008-03-10T13:44:00.000-04:00\", \"id\": \"CVE-2008-1255\", \"Modified\": \"2008-09-05T17:37:15.440-04:00\", \"cvss\": 10.0, \"summary\": \"The ZyXEL P-660HW series router maintains authentication state by IP address, which allows remote attackers to bypass authentication by establishing a session from a source IP address of a previously authenticated user.\"}, {\"cwe\": \"CWE-352\", \"references\": [\"http://www.securityfocus.com/archive/1/archive/1/489009/100/0/threaded\", \"http://www.gnucitizen.org/projects/router-hacking-challenge/\", \"http://xforce.iss.net/xforce/xfdb/41111\"], \"vulnerable_configuration\": [\"cpe:/h:zyxel:p-660hw\"], \"Published\": \"2008-03-10T13:44:00.000-04:00\", \"id\": \"CVE-2008-1254\", \"Modified\": \"2008-09-05T17:37:15.287-04:00\", \"cvss\": 6.8, \"summary\": \"Multiple cross-site request forgery (CSRF) vulnerabilities on the ZyXEL P-660HW series router allow remote attackers to (1) change DNS servers and (2) add keywords to the \\\"bannedlist\\\" via unspecified vectors.\"}]\r\n~~~\r\n\r\nSoftware using cve-search\r\n-------------------------\r\n\r\n* [cve-portal](https://www.github.com/CIRCL/cve-portal) which is a CVE notification portal\r\n* [cve-search-mt](https://www.github.com/NorthernSec/cve-search-mt) which is a set of management tools for CVE-Search\r\n* [cve-scan](https://www.github.com/NorthernSec/cve-scan) which is a NMap CVE system scanner\r\n\r\nChangelog\r\n---------\r\n\r\nYou can find the changelog [here](https://github.com/cve-search/UpdateLog)\r\n\r\nLicense\r\n-------\r\n\r\ncve-search is free software released under the \"Modified BSD license\"\r\n\r\n    Copyright (c) 2012 Wim Remes - https://github.com/wimremes/\r\n    Copyright (c) 2012-2016 Alexandre Dulaunoy - https://github.com/adulau/\r\n    Copyright (c) 2015-2016 Pieter-Jan Moreels - https://github.com/pidgeyl/\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}