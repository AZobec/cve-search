#! /usr/local/bin/python3

import json, sys
import pymongo
import argparse
import datetime
from urllib.request import urlopen
from xml.sax import make_parser
from xml.sax.handler import ContentHandler


argparser = argparse.ArgumentParser(description='populate/update the local CVE database')
argparser.add_argument('-u', action='store_true', help='update the database')
argparser.add_argument('-p', action='store_true', help='populate the database')
argparser.add_argument('-f', help='process a local xml file')
args = argparser.parse_args()

file_prefix = "nvdcve-2.0-"
file_suffix = ".xml"
file_mod = "modified"
file_rec = "recent"
date = datetime.datetime.now()
year = date.year+1

class CVEHandler(ContentHandler):
    def __init__(self):
        self.cves = []
        self.inCVSSElem = 0
        self.inSUMMElem = 0
        self.inDTElem = 0
        self.inPUBElem = 0
    def startElement(self, name, attrs):
        if name == 'entry':
            self.cves.append({'id': attrs.get('id'), 'references': [],'vulnerable_configuration': []})
        elif name == 'cpe-lang:fact-ref':
            self.cves[-1]['vulnerable_configuration'].append(attrs.get('name'))
        elif name == 'cvss:score':
            self.inCVSSElem = 1
            self.CVSS = ""
        elif name == 'vuln:summary':
            self.inSUMMElem = 1
            self.SUMM = ""
        elif name == 'vuln:published-datetime':
            self.inDTElem = 1
            self.DT = ""
        elif name == 'vuln:last-modified-datetime':
            self.inPUBElem = 1
            self.PUB = ""
        elif name == 'vuln:reference':
            self.cves[-1]['references'].append(attrs.get('href'))

    def characters(self, ch):
        if self.inCVSSElem:
            self.CVSS += ch
        if self.inSUMMElem:
            self.SUMM += ch
        if self.inDTElem:
            self.DT += ch
        if self.inPUBElem:
            self.PUB += ch

    def endElement(self, name):
        if name == 'cvss:score':
            self.inCVSSElem = 0
            self.cves[-1]['cvss'] = self.CVSS
        if name == 'vuln:summary':
            self.inSUMMElem = 0
            self.cves[-1]['summary'] = self.SUMM
        if name == 'vuln:published-datetime':
            self.inDTElem = 0
            self.cves[-1]['Published'] = self.DT
        if name == 'vuln:last-modified-datetime':
            self.inPUBElem = 0
            self.cves[-1]['Modified'] = self.PUB

if __name__=='__main__':
    connect = pymongo.Connection()
    db = connect.cvedb
    collection = db.cves
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)	
    if args.u:
        getfile = file_prefix+file_mod+file_suffix
        f = urlopen("http://static.nvd.nist.gov/feeds/xml/cve/"+getfile)
        parser = make_parser()
        ch = CVEHandler()
        parser.setContentHandler(ch)
        parser.parse(f)
        for item in ch.cves:
            x=collection.find({'id': item['id']})
            if x.count() > 0:
                collection.update({'id': item['id']}, {"$set": {'cvss': item['cvss'],'summary': item['summary'], 'references': item['references'], 'vulnerable_configuration': item['vulnerable_configuration'], 'last-modified': item['Modified']}}) 
        getfile = file_prefix+file_rec+file_suffix
        f = urlopen("http://static.nvd.nist.gov/feeds/xml/cve/"+getfile)
        parser = make_parser()
        ch = CVEHandler()
        parser.setContentHandler(ch)
        parser.parse(f)
        for item in ch.cves:
            x=collection.find({'id': item['id']})
            if x.count() > 0:
                print("item found : "+item['id'])
                collection.update({'id': item['id']}, {"$set": {'cvss': item['cvss'],'summary': item['summary'], 'references': item['references'], 'vulnerable_configuration': item['vulnerable_configuration'], 'last-modified': item['Modified']}})
            else:
                collection.insert(item)
    elif args.p:
        x=collection.find({'id': 'CVE-2002-001'})
        print(str(x.count()))
        if x.count() > 1 :
            print("database already populated")
        else:  
            for x in range(2002,year):
                parser = make_parser()
                ch = CVEHandler()
                parser.setContentHandler(ch)
                getfile = file_prefix+str(x)+file_suffix
                f = urlopen("http://static.nvd.nist.gov/feeds/xml/cve/"+getfile)
                parser.parse(f)
                for item in ch.cves:
                    print(item['id'])
                collection.insert(ch.cves)
#                print("inserted CVE records for "+str(x))

#    f = open(sys.argv[1],"r")
#    parser = make_parser()
#    ch = CVEHandler()
#    parser.setContentHandler(ch)
#    parser.parse(f)
#   print(json.dumps(ch.cves))
#    for item in ch.cves:
#       print(item)
#       collection.insert(item)
