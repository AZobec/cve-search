from xml.sax.handler import ContentHandler


class CapecHandler(ContentHandler):
    def __init__(self):
        self.capec = []
        self.Attack_Pattern_Catalog_tag = False
        self.Attack_Patterns_tag = False
        self.Attack_Pattern_tag = False
        self.Attack_step_tag = False
        self.Description_tag = False
        self.Text_tag = False
        self.Prerequisites_tag = False
        self.Prerequisite_tag = False
        self.Mitigations_tag = False
        self.Mitigation_tag = False
        self.Related_Weaknesses_tag = False
        self.Related_Weakness_tag = False
        self.CWE_ID_tag = False

        self.tag = False

        self.id = ""
        self.name = ""

        self.Summary_ch = ""
        self.Prerequisite_ch = ""
        self.Mitigation_ch = ""
        self.CWE_ID_ch = ""

        self.Summary = []
        self.Prerequisite = []
        self.Solution_or_Mitigation = []
        self.Related_Weakness = []

    def startElement(self, name, attrs):

        if name == "Attack_Pattern_Catalog":
            self.Attack_Pattern_Catalog_tag = True
        if name == "Attack_Patterns" and self.Attack_Pattern_Catalog_tag:
            self.Attack_Patterns_tag = True
        if name == "Attack_Pattern" and self.Attack_Patterns_tag:
            self.Attack_Pattern_tag = True

        if self.Attack_Pattern_tag:
            self.tag = name
            if self.tag == "Attack_Pattern":
                self.id = attrs.getValue("ID")
                self.name = attrs.getValue("Name")

            if self.tag == "Attack_Step":
                self.Attack_step_tag = True

            if self.tag == "Description" and not self.Attack_step_tag:
                self.Description_tag = True
                self.Summary_ch = ""

            if self.tag == "Prerequisites":
                self.Prerequisites_tag = True
            if name == "Prerequisite" and self.Prerequisites_tag:
                self.Prerequisite_tag = True
                self.Prerequisite_ch = ""

            if self.tag == "Mitigations":
                self.Mitigations_tag = True
            if name == "Mitigation" and self.Mitigations_tag:
                self.Mitigation_tag = True
            if name == "xhtml:p" and self.Mitigation_tag:
                self.Text_tag = True
                self.Mitigation_ch = ""

            if self.tag == "Related_Weaknesses":
                self.Related_Weaknesses_tag = True
            if name == "Related_Weakness" and self.Related_Weaknesses_tag:
                self.Related_Weakness.append(attrs.getValue("CWE_ID"))

    def characters(self, ch):
        if self.Description_tag:
            self.Summary_ch += ch

        if self.Prerequisite_tag:
            self.Prerequisite_ch += ch

        if self.Text_tag:
            if self.Mitigation_tag:
                self.Mitigation_ch += ch

    def endElement(self, name):
        if name == "Description" and not self.Attack_step_tag:
            self.Summary.append(self.Summary_ch.rstrip())
            if self.Summary_ch != "":
                self.Summary_ch = ""
            self.Description_tag = False

        if name == "Attack_Step":
            self.Attack_step_tag = False

        if name == "Prerequisite":
            if self.Prerequisite_ch != "":
                self.Prerequisite.append(self.Prerequisite_ch.rstrip())
            self.Prerequisite_tag = False
        if name == "Mitigation":
            if self.Mitigation_ch != "":
                self.Solution_or_Mitigation.append(self.Mitigation_ch.rstrip())
                self.Mitigation_ch = ""
            self.Mitigation_tag = False

        if name == "Prerequisites":
            self.Prerequisites_tag = False
        if name == "Mitigations":
            self.Mitigations_tag = False
        if name == "Related_Weaknesses":
            self.Related_Weaknesses_tag = False

        if name == "Attack_Pattern":
            self.capec.append(
                {
                    "name": self.name,
                    "id": self.id,
                    "summary": "\n".join(self.Summary),
                    "prerequisites": " ".join(self.Prerequisite),
                    "solutions": " ".join(self.Solution_or_Mitigation),
                    "related_weakness": sorted(self.Related_Weakness),
                }
            )
            self.Summary = []
            self.Prerequisite = []
            self.Solution_or_Mitigation = []
            self.Related_Weakness = []

            self.Attack_Pattern_tag = False
        if name == "Attack_Patterns":
            self.Attack_Patterns_tag = False
        if name == "Attack_Pattern_Catalog":
            self.Attack_Pattern_Catalog_tag = False


class CWEHandler(ContentHandler):
    def __init__(self):
        self.cwe = []
        self.description_tag = False
        self.category_tag = False
        self.weakness_tag = False
        self.weakness_relationships_tag = False
        self.relationship_tag = False
        self.relationship_views_tag = False
        self.relationship_view_tag = False
        self.relationship_target_tag = False
        self.relationship_nature_tag = False
        self.relationship_id_tag = False

    def startElement(self, name, attrs):

        if name == "Weakness":
            self.weakness_tag = True
            self.statement = ""
            self.weaknessabs = attrs.get("Abstraction")
            self.name = attrs.get("Name")
            self.idname = attrs.get("ID")
            self.status = attrs.get("Status")
            self.cwe.append(
                {
                    "name": self.name,
                    "id": self.idname,
                    "status": self.status,
                    "weaknessabs": self.weaknessabs,
                }
            )
        elif name == "Category":
            self.category_tag = True
            self.category_name = attrs.get("Name")
            self.category_id = attrs.get("ID")
            self.category_status = attrs.get("Status")
            self.cwe.append(
                {
                    "name": self.category_name,
                    "id": self.category_id,
                    "status": self.category_status,
                    "weaknessabs": "Category",
                }
            )

        elif name == "Description" and self.weakness_tag:
            self.description_tag = True
            self.description = ""

        elif name == "Summary" and self.category_tag:
            self.description_tag = True
            self.description = ""

        elif name == "Relationships" and (self.weakness_tag or self.category_tag):
            self.weakness_relationships_tag = True
            self.relationships = []

        elif name == "Relationship" and self.weakness_relationships_tag:
            self.relationship_tag = True
            self.relationship = {}

        elif name == "Relationship_Views" and self.relationship_tag:
            self.relationship_views_tag = True
            self.relationship_views = []

        elif name == "Relationship_View_ID" and self.relationship_views_tag:
            self.relationship_view_tag = True
            self.relationship_view_id = ""

        elif name == "Relationship_Target_Form" and self.relationship_tag:
            self.relationship_target_tag = True
            self.relationship_target = ""
        elif name == "Relationship_Nature" and self.relationship_tag:
            self.relationship_nature_tag = True
            self.relationship_nature = ""
        elif name == "Relationship_Target_ID" and self.relationship_tag:
            self.relationship_id_tag = True
            self.relationship_id = ""

    def characters(self, ch):
        if self.description_tag:
            self.description += ch.replace("       ", "")
        if self.relationship_view_tag:
            self.relationship_view_id += ch.replace("       ", "")
        if self.relationship_target_tag:
            self.relationship_target += ch.replace("       ", "")
        if self.relationship_nature_tag:
            self.relationship_nature += ch.replace("       ", "")
        if self.relationship_id_tag:
            self.relationship_id += ch.replace("       ", "")

    def endElement(self, name):
        if name == "Description" and self.weakness_tag:
            self.description_tag = False
            self.description = self.description + self.description
            self.cwe[-1]["Description"] = self.description.replace("\n", "")
        if name == "Summary" and self.category_tag:
            self.description_tag = False
            self.description = self.description + self.description
            self.cwe[-1]["Description"] = self.description.replace("\n", "")
        elif name == "Weakness" and self.weakness_tag:
            self.weakness_tag = False
        elif name == "Category" and self.category_tag:
            self.category_tag = False

        elif name == "Relationships" and self.weakness_tag:
            self.weakness_relationships_tag = False
            self.cwe[-1]["relationships"] = self.relationships
        elif name == "Relationships" and self.category_tag:
            self.weakness_relationships_tag = False
            self.cwe[-1]["relationships"] = self.relationships

        elif name == "Relationship" and self.weakness_relationships_tag:
            self.relationship_tag = False
            self.relationships.append(self.relationship)

        elif name == "Relationship_View_ID" and self.relationship_tag:
            self.relationship_view_tag = False
            self.relationship_views.append(self.relationship_view_id)

        elif name == "Relationship_Views" and self.relationship_views_tag:
            self.relationship_views_tag = False
            self.relationship["view_id"] = self.relationship_views

        elif name == "Relationship_Target_Form" and self.relationship_tag:
            self.relationship_target_tag = False
            self.relationship_target = self.relationship_target
            self.relationship["weaknessabs"] = self.relationship_target

        elif name == "Relationship_Nature" and self.relationship_tag:
            self.relationship_nature_tag = False
            self.relationship_nature = self.relationship_nature
            self.relationship["nature"] = self.relationship_nature

        elif name == "Relationship_Target_ID" and self.relationship_tag:
            self.relationship_id_tag = False
            self.relationship_id = self.relationship_id
            self.relationship["cwe_id"] = self.relationship_id
