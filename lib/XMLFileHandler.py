from abc import abstractmethod

from dateutil.parser import parse as parse_datetime

from lib.DatabaseLayer import getInfo
from lib.DownloadHandler import DownloadHandler


class XMLFileHandler(DownloadHandler):
    def __init__(self, feed_type):
        super().__init__(feed_type)

    def __repr__(self):
        """ return string representation of object """
        return "<< XMLFileHandler:{} >>".format(self.feed_type)

    def download_site(self, url):
        self.logger.debug("Downloading: {}".format(url))
        session = self.get_session()
        with session.get(url) as response:
            self.last_modified = parse_datetime(
                response.headers["last-modified"], ignoretz=True
            )

            self.logger.debug(
                "Last {} modified value: {}".format(self.feed_type, self.last_modified)
            )

            i = getInfo(self.feed_type.lower())

            if i is not None:
                if self.last_modified == i["last-modified"]:
                    self.logger.debug(
                        "{}'s are not modified since the last update".format(
                            self.feed_type
                        )
                    )
                    return

            content_type = response.headers["content-type"]

            wd, filename = self.store_file(
                response_content=response.content, content_type=content_type, url=url
            )

            if filename is not None:
                self.file_to_queue(working_dir=wd, filename=filename)
            else:
                self.logger.error(
                    "Unable to retrieve a filename; something went wrong during the storing of the file"
                )

    @abstractmethod
    def file_to_queue(self, **kwargs):
        raise NotImplementedError

    @abstractmethod
    def update(self, **kwargs):
        raise NotImplementedError

    @abstractmethod
    def populate(self, **kwargs):
        raise NotImplementedError
