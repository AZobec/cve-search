#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Admin creator script
#
# Creates an admin account in the database
# Only master accounts are allowed to add and remove users
# First account registered is the master account
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015 		Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))

import pymongo
from flask.ext.login import UserMixin

import configparser

# config
Config = configparser.ConfigParser()
Config.read(os.path.join(runPath, "../configuration.ini"))
# default config
mongoHost = 'localhost'
mongoPort = 27017
mongoDB = "cvedb"
# read config from file
if ("Host" in Config['Mongo']) and (Config.get("Mongo", "Host")!=""):
    mongoHost = Config.get("Mongo", "Host")
if ("Port" in Config['Mongo']) and (Config.get("Mongo", "Port")!=""):
    mongoPort = int(Config.get("Mongo", "Port"))
if ("DB" in Config['Mongo']) and (Config.get("Mongo", "DB")!=""):
    mongoDB = Config.get("Mongo", "DB")

# connect to db
connect = pymongo.MongoClient(mongoHost, mongoPort)
db = connect[mongoDB]
collection = db.mgmt_users

class User(UserMixin):
    '''Simple User class'''
    
    USERS = {}
    for user in collection.find({}):
        USERS[user['username']] = user['password']

    def __init__(self, id):
        if not id in self.USERS:
            raise UserNotFoundError()
        self.id = id
        self.password = self.USERS[id]

    @classmethod
    def get(self_class, id):
        '''Return user instance of id, return None if not exist'''
        try:
            return self_class(id)
        except UserNotFoundError:
            return None
