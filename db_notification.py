#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Notification database
#  includes the user who will receive a notification
#  when a new CVE is published and matching their monitored CPE
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2014 Alexandre Dulaunoy - a@foo.be

import redis
import argparse

argParser = argparse.ArgumentParser(description='Notification database management for cve-search', epilog='\n')
argParser.add_argument('-c', action='append', help='CPE name(s) to add (e.g. google:chrome)')
argParser.add_argument('-g', type=str, help='Name of the organization (e.g. mycompany)')
argParser.add_argument('-d', action='append', help='Destination(s) of matching CPE (mailto:foo@bar.com)')
argParser.add_argument('-a', action='store_true', default=False, help='Add a notification entry')
argParser.add_argument('-r', action='store_true', default=False, help='Remove a notification entry')
argParser.add_argument('-v', action='store_true', default=False, help='Verbose logging')
argParser.add_argument('-n', action='store_true', default=False, help='Run notification')
args = argParser.parse_args()


def checkreq ():

    if args.c is None:
        print ("You need at least one cpe or partial cpe entry (-c) \n")
        argParser.print_help()
        exit(1)
    if args.g is None:
        print ("Organization is missing (-g) \n")
        argParser.print_help()
        exit(1)


#connect = pymongo.Connection()
#db = connect.cvedb
#cpe = db.cpe

# Redis db 10 (cpe)
# Redis db 11 (notification)

# Set of notification for an organization set(n:orgname) -> notification destination
# Set of cpe value for an organization set(c:orgname) -> cpe values
# Set of organizations set(orgs) -> organisations

# Set of state notification set(s:orgs) -> CVEs
r = redis.StrictRedis(host='localhost', port=6379, db=11)

if args.a and args.r and args.n:
    argParser.print_help()
    exit(1)

if args.a:
    checkreq()
    if not r.sismember("orgs", args.g):
        if args.v:
            print ("Organization "+args.g+" added.")
        r.sadd("orgs", args.g)

    for cpe in args.c:
        r.sadd("c:"+args.g, cpe)
        if args.v:
            print (cpe+ " added")

    if not r.scard("d:"+args.g):
        if args.g:
            for destination in args.d:
                r.sadd("d:"+args.g, destination)
        else:
            print ("destination missing for "+args.g+" you need at least one destination -d")
            exit(1)

elif args.r:
    checkreq()
    for cpe in args.c:
        r.srem("c:"+args.g, cpe)
        if args.v:
            print (cpe+ " removed")

    if r.scard("c:"+args.g) < 1:
        r.srem("orgs",args.g)
        if args.v:
                print ("org " + args.g + " removed")
elif args.n:
    for org in r.smembers("orgs"):
        if args.v:
            print ("Notification for "+ org.decode("utf-8"))
        for cpe in r.smembers("c:"+ org.decode("utf-8")):
            print ("CPE "+ cpe.decode("utf-8"))
else:
    argParser.print_help()
