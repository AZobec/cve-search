#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Admin creator script
#
# Creates an admin account in the database
# Only master accounts are allowed to add and remove users
# First account registered is the master account
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015 		Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "./lib/"))

import pymongo

import argparse
import getpass
import hashlib

from Config import Configuration

# args
argParser = argparse.ArgumentParser(description='Admin account creator for the mongo database')
argParser.add_argument('-a', help='<name> Add an account', default=False)
argParser.add_argument('-c', help='Change the password of an account', default=None)
argParser.add_argument('-r', help='Remove account', default=False)
argParser.add_argument('-p', help='Promote account to master', default=False)
argParser.add_argument('-d', help='Demote account to normal user', default=False)
args = argParser.parse_args()

# connect to db
db = Configuration.getMongoConnection()
collection = db.mgmt_users

# functions
def buildPassword(password, salt=None, user=None):
    if not salt:
        salt = bytearray()
    if user:
        if existsInDB(user):
            salt = (list(collection.find({'username':user}))[0])['salt']
    return hashlib.sha256(salt + bytes(password, "utf-8")).hexdigest()

def promptNewPass():
    password = getpass.getpass("New password:")
    verify = getpass.getpass("Verify password:")
    if (password != verify):
        sys.exit("The passwords don't match!")
    # generate new salt
    salt = os.urandom(32)
    keyset = {'password':buildPassword(password,salt=salt), 'salt':salt}
    return keyset

def masterLogin():
    master = input("Master account username: ")
    masterPass = buildPassword(getpass.getpass("Master password:"), user=master)
    if collection.find({'username':master, 'password':masterPass, 'master':True}).count()==0:
        sys.exit('Master user/password combination does not exist')
    return True

def existsInDB(user):
    return True if collection.find({'username':user}).count()>0 else False

def exitUserExists():
    sys.exit('User already exists in database')

def exitUserNotExists():
    sys.exit('User does not exist in database')

def isLastAdmin(user):
    if len(list(collection.find({'username':{'$ne':user}, 'master':True}))) == 0:
        sys.exit('This user is the last admin in the database and thus can not be removed')

# script run
try:
    if args.a:
        username = args.a
        if existsInDB(username):
            exitUserExists()
        # set master if db is empty
        if(collection.count()>0):
            masterLogin()
            keyset = promptNewPass()
            collection.insert({'username':username,'password':keyset['password'], 'salt':keyset['salt']})
        else:
            keyset = promptNewPass()
            collection.insert({'username':username,'password':keyset['password'], 'salt':keyset['salt'], 'master':True})
        sys.exit("User added")
    elif args.c:
        username = args.c
        if not existsInDB(username):
            exitUserNotExists()
        password = buildPassword(getpass.getpass("Old password:"), user=username)
        if collection.find({'username':username, 'password':password}).count()==0:
            sys.exit('User/password combination does not exist')
        keyset = promptNewPass()
        collection.update({'username':username}, {'$set':{'password':keyset['password'], 'salt':keyset['salt']}})
        sys.exit("Password updated")
    elif args.r:
        username = args.r
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        isLastAdmin(username)
        collection.remove({'username':username})
        sys.exit('User removed from database')
    elif args.p:
        username = args.p
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        # promote
        collection.update({'username':username}, {'$set':{'master':True}})
        sys.exit('User promoted')
    elif args.d:
        username = args.d
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        isLastAdmin(username)
        # demote
        collection.update({'username':username}, {'$unset':{'master':""}})
        sys.exit('User demoted')

except pymongo.errors.ConnectionFailure:
    print("Can't connect to the mongo database")
    
    
