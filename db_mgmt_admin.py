#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Admin creator script
#
# Creates an admin account in the database
# Only master accounts are allowed to add and remove users
# First account registered is the master account
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015 		Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))

import pymongo

import argparse
import configparser
import getpass
import hashlib

# config
Config = configparser.ConfigParser()
Config.read(os.path.join(runPath, "./configuration.ini"))
# default config
mongoHost = 'localhost'
mongoPort = 27017
mongoDB = "cvedb"
# read config from file
if ("Host" in Config['Mongo']) and (Config.get("Mongo", "Host")!=""):
    mongoHost = Config.get("Mongo", "Host")
if ("Port" in Config['Mongo']) and (Config.get("Mongo", "Port")!=""):
    mongoPort = int(Config.get("Mongo", "Port"))
if ("DB" in Config['Mongo']) and (Config.get("Mongo", "DB")!=""):
    mongoDB = Config.get("Mongo", "DB")

# args
argParser = argparse.ArgumentParser(description='Admin account creator for the mongo database')
argParser.add_argument('-a', help='<name> Add an account', default=False)
argParser.add_argument('-c', help='Change the password of an account', default=None)
argParser.add_argument('-r', help='Remove account', default=False)
argParser.add_argument('-p', help='Promote account to master', default=False)
argParser.add_argument('-d', help='Demote account to normal user', default=False)
args = argParser.parse_args()

# connect to db
connect = pymongo.MongoClient(mongoHost, mongoPort)
db = connect[mongoDB]
collection = db.mgmt_users

# functions
def promptPass():
    password = getpass.getpass()
    verify = getpass.getpass("Verify password:")
    if (password != verify):
        sys.exit("The passwords don't match!")
    return hashlib.sha256(bytes(password, "utf-8")).hexdigest()

def masterLogin():
    master = input("Master account username: ")
    masterPass = hashlib.sha256(bytes(getpass.getpass("Master password:"), "utf-8")).hexdigest()
    if collection.find({'username':master, 'password':masterPass, 'master':True}).count()==0:
        sys.exit('Master user/password combination does not exist')
    return True

def existsInDB(user):
    return True if collection.find({'username':username}).count()>0 else False

def exitUserExists():
    sys.exit('User already exists in database')

def exitUserNotExists():
    sys.exit('User does not exist in database')

def isLastAdmin(user):
    if len(list(collection.find({'username':{'$ne':user}, 'master':True}))) == 0:
        sys.exit('This user is the last admin in the database and thus can not be removed')

# script run
try:
    if args.a:
        username = args.a
        if existsInDB(username):
            exitUserExists()
        # set master if db is empty
        if(collection.count()>0):
            masterLogin()
            password = promptPass()
            collection.insert({'username':username,'password':password})
        else:
            password = promptPass()
            collection.insert({'username':username,'password':password, 'master':True})
        sys.exit("User added")
    elif args.c:
        username = args.c
        if not existsInDB(username):
            exitUserNotExists()
        password = hashlib.sha256(bytes(getpass.getpass("Old password:"), "utf-8")).hexdigest()
        if collection.find({'username':username, 'password':password}).count()==0:
            sys.exit('User/password combination does not exist')
        password = promptPass()
        collection.update({'username':username}, {'$set':{'password':password}})
        sys.exit("Password updated")
    elif args.r:
        username = args.r
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        isLastAdmin(username)
        collection.remove({'username':username})
        sys.exit('User removed from database')
    elif args.p:
        username = args.p
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        # promote
        collection.update({'username':username}, {'$set':{'master':True}})
        sys.exit('User promoted')
    elif args.d:
        username = args.d
        if not existsInDB(username):
            exitUserNotExists()
        masterLogin()
        isLastAdmin(username)
        # demote
        collection.update({'username':username}, {'$unset':{'master':""}})
        sys.exit('User demoted')

except pymongo.errors.ConnectionFailure:
    print("Can't connect to the mongo database")
    
    
